<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wys&#39;blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wysblogs.top/"/>
  <updated>2020-08-21T05:30:24.242Z</updated>
  <id>http://wysblogs.top/</id>
  
  <author>
    <name>wys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>volitale关键字详解</title>
    <link href="http://wysblogs.top/2020/08/21/volitale%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wysblogs.top/2020/08/21/volitale关键字详解/</id>
    <published>2020-08-21T05:30:24.000Z</published>
    <updated>2020-08-21T05:30:24.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网易有道一面</title>
    <link href="http://wysblogs.top/2020/08/20/%E7%BD%91%E6%98%93%E6%9C%89%E9%81%93%E4%B8%80%E9%9D%A2/"/>
    <id>http://wysblogs.top/2020/08/20/网易有道一面/</id>
    <published>2020-08-20T08:33:25.000Z</published>
    <updated>2020-08-20T18:05:07.751Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网易有道一面"><a href="#网易有道一面" class="headerlink" title="网易有道一面"></a>网易有道一面</h1><p>上来介绍了一下自己，然后开始面试</p><p><strong>1、springboot常用的注解</strong></p><p>说了几个。RestController，Compoent、Parama，Dao Mapper</p><p>最后问了我事务注解</p><p>@Transaction，然后说了说事务的四个特性</p><p><strong>2、SpringBoot和Spring MVC的区别</strong></p><p>说了说SpringBoot 和 Spring的差别</p><p><strong>3、SpringMVC的执行流程</strong></p><p><strong>4、SpringBoot事务注解用的是什么</strong></p><p>@Transaction，然后说了说事务的四个特性</p><p><strong>5、MySql组合索引</strong></p><p>意思，和最左匹配原则</p><p><strong>6、怎么防止别人攻击你的服务器和爬虫</strong></p><p>我说防止sql注入，并且限制IP</p><p><strong>7、String、StringBuffer、StringBuilder区别</strong></p><p>String底层是一个final修饰的数组。StringBuffer的话线程安全，StringBuilder的话和StringBuffer差不多</p><p><strong>8、synchronized是啥</strong></p><p>JVM关键字，然后说了1.7到1.8有个锁升级过程</p><p><strong>9、synchronized 和 ReentantLock区别</strong></p><p><strong>10、垃圾回收机制</strong></p><p>说了垃圾回收算法。</p><p><strong>11、你了解的集合</strong></p><p>双列集合和单列集合。主要说了HashMap，如何保证线程安全。三种。</p><p><strong>12、实现多线程的方式</strong></p><p>4种。继承Thread类，实现Runnable接口，实现CallableBack接口，线程池。。</p><p><strong>13、场景题：怎么做出一个排行榜，能够检索前100名用户背单词的量，和显示自己的名次</strong></p><p>我一开始不懂。。后来经提醒，就是加索引。然后使用order by查找到前100名，然后拿出最后一名和自己作比较，使用Random来随机给自己生成一个大概的名次范围。</p><p><strong>14、给几个数字，求中位数</strong></p><p>直接暴力，然后除2.。。。肯定不行</p><p>面试官提醒说是快排思想，我说每次排序都加一个标识符，然后比较完之后，左边都是有序的。判断一下是否到达中位数的位置就返回。</p><p>但是解决不了偶数问题。然后就是排完序直接求解。。</p><p>今天网上看了看，堆排序也行。。就是建立一个(n+1)/2的堆，然后让后面得值依次与根比较，如果小就舍弃，大的话就调整一下堆，把大的值作为根。。最后比较完之后。根就是中位数。（很神奇。。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面经" scheme="http://wysblogs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://wysblogs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>主键索引和唯一索引</title>
    <link href="http://wysblogs.top/2020/08/20/%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/"/>
    <id>http://wysblogs.top/2020/08/20/主键索引和唯一索引/</id>
    <published>2020-08-20T06:46:41.000Z</published>
    <updated>2020-08-21T04:08:48.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主键索引和唯一索引"><a href="#主键索引和唯一索引" class="headerlink" title="主键索引和唯一索引"></a>主键索引和唯一索引</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><strong>主键索引一定是唯一索引，唯一索引不一定是主键索引</strong><ul><li>主键可以标志某一行的记录，防止数据更新不会冲突</li><li>主键同样也是和外键一起构成参照完整性约束，防止数据不一致</li></ul></li><li><strong>一个表中可以有多个唯一性索引，但是只能有一个主键</strong></li><li><strong>主键列不允许空值，而唯一性索引列允许空值</strong></li><li><strong>主键产生唯一的聚集索引，唯一索引产生唯一的非聚集索引</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://wysblogs.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://wysblogs.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq基础</title>
    <link href="http://wysblogs.top/2020/08/20/RabbitMq%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysblogs.top/2020/08/20/RabbitMq基础/</id>
    <published>2020-08-20T04:38:42.000Z</published>
    <updated>2020-08-20T04:38:42.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拦截器和过滤器</title>
    <link href="http://wysblogs.top/2020/08/20/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://wysblogs.top/2020/08/20/拦截器和过滤器/</id>
    <published>2020-08-20T03:58:46.000Z</published>
    <updated>2020-08-21T04:33:20.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="拦截器和过滤器"><a href="#拦截器和过滤器" class="headerlink" title="拦截器和过滤器"></a>拦截器和过滤器</h1><p><strong>过滤器（Filter）</strong></p><p><strong>拦截器（Intercetption）</strong></p><h2 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h2><ul><li>过滤器依赖于Servlet容器</li><li>过滤器基于函数回调，可以对几乎所有请求进行过滤</li><li>过滤器只能在容器初始化的时候调用一次</li><li>过滤器一般可以做统一字符编码，或者过滤一些字符</li></ul><h2 id="拦截器（Intercetption）"><a href="#拦截器（Intercetption）" class="headerlink" title="拦截器（Intercetption）"></a>拦截器（Intercetption）</h2><ul><li>拦截器依赖于Spring容器</li><li>拦截器基于反射机制，属于面向切面的一个应用</li><li>拦截器只能对action请求起作用</li><li>在action的生命周期中，拦截器可以被多次调用</li><li>拦截器可以获取IOC容器中的各个bean</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="spring" scheme="http://wysblogs.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://wysblogs.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper基础</title>
    <link href="http://wysblogs.top/2020/08/19/zookeeper%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysblogs.top/2020/08/19/zookeeper基础/</id>
    <published>2020-08-19T02:02:12.000Z</published>
    <updated>2020-08-21T05:21:54.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zookeeper基础"><a href="#zookeeper基础" class="headerlink" title="zookeeper基础"></a>zookeeper基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>zookeeper是一个分布式协调服务。</p><p>zookeeper=文件系统+监听通知机制</p><p>zookeeper主要是用来实现分布式应用配置管理、统一命名服务，状态同步服务，集群管理等功能。</p><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><p>类似于Linux操作系统的目录结构，即<strong>DataTree</strong>，每个节点使用的是<strong>DataNode</strong></p><h2 id="分布式协调特点"><a href="#分布式协调特点" class="headerlink" title="分布式协调特点"></a>分布式协调特点</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://wysblogs.top/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="http://wysblogs.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>杭州端点科技二面</title>
    <link href="http://wysblogs.top/2020/08/18/%E6%9D%AD%E5%B7%9E%E7%AB%AF%E7%82%B9%E7%A7%91%E6%8A%80%E4%BA%8C%E9%9D%A2/"/>
    <id>http://wysblogs.top/2020/08/18/杭州端点科技二面/</id>
    <published>2020-08-18T12:37:17.000Z</published>
    <updated>2020-08-20T02:20:41.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="杭州端点科技二面"><a href="#杭州端点科技二面" class="headerlink" title="杭州端点科技二面"></a>杭州端点科技二面</h1><p> 时间很紧。就在我面完北森二面的当天晚上。很仓促，我还没做好心理准备。</p><p>开始介绍了一下自己和项目</p><p>着重说了说邮箱实现的过程。</p><p><strong>1、spring bean的生命周期。</strong></p><p>我只知道 创建 - 使用 - 销毁。。</p><p>底层原理没怎么去记。</p><p><strong>2、拦截器和过滤器区别</strong></p><p>拦截器（Interceptor）基于spring容器，过滤器（Filter）基于sevelet容器。</p><p>。剩下的不知道了。</p><p><strong>3、Spring懒加载</strong></p><p>主要是针对bean的。只有在使用到bean的时候才加载。如果直接就创建的话属于饿汉式模式</p><p><strong>4、讲一下AOP和IOC</strong></p><p>说了说AOP的作用，应用在哪方面，底层是基于什么是实现的。之后说了IOC的作用</p><p><strong>5、关系型数据库和非关系型数据库区别</strong></p><p>关系型数据库是字段和对象属性是一一对应的。</p><p>非关系型数据库不需要一一对应。是一种key-value形式在存储的。</p><p><strong>6、redis是多线程还是单线程</strong></p><p>单线程。。说了说为什么是单线程。</p><p><strong>7、数据库有三千万的数据，redis缓存了30w的数据，如何保证这30w的数据一定是热点数据</strong></p><p>缓存淘汰策略。。volitale-lru淘汰最近最久使用的。</p><p><strong>8、淘汰策略有哪些</strong></p><p>6种。。都说一说</p><p><strong>9、mybatis的#{}和&amp;{}</strong></p><p><strong>10、innodb的数据结构是什么</strong></p><p>Hash表和B+树。。</p><p><strong>11、dubbo的暴露服务的过程</strong></p><p><strong>12、AIO和BIO，NIO</strong></p><p><strong>13、Netty的粘包和拆包</strong></p><p>一点都没了解</p><p><strong>14、zookeeper集群存储容器</strong></p><p><strong>15、wait和sleep的区别</strong></p><p><strong>16、java实现阻塞队列怎么去实现的</strong></p><p><strong>17、生产者消费者模型</strong></p><p><strong>18、字符串四则运算。怎么去实现的</strong></p><p>两个栈。一个是通过一个存储数据，一个存储符号。</p><p>然后运算一下</p><p><strong>19、你有什么问题</strong></p><p>1、说一说自己哪里需要提升。</p><p>自己的项目经验有些不足。多了解了解分布式</p><p>多去学习一下rabbitmq，spring cloud，docker之类的。</p><p>2、问一下公司的技术栈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面经" scheme="http://wysblogs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://wysblogs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>北森云计算二面</title>
    <link href="http://wysblogs.top/2020/08/18/%E5%8C%97%E6%A3%AE%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BA%8C%E9%9D%A2/"/>
    <id>http://wysblogs.top/2020/08/18/北森云计算二面/</id>
    <published>2020-08-18T12:36:43.000Z</published>
    <updated>2020-08-20T01:55:47.517Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="北森云计算二面"><a href="#北森云计算二面" class="headerlink" title="北森云计算二面"></a>北森云计算二面</h1><p>因为面的是.net，但是我是学java的。。所以面试面的让我有点不舒服（好多都不会。。）</p><p>开始介绍一下自己</p><p>说了说自己的信息还有项目</p><p>然后面试官说主要做的主要是web项目，然后就开始问我web方面的一些内容</p><p><strong>1、HTTP是什么</strong></p><p><strong>2、HTTP基于什么实现的</strong></p><p><strong>3、TCP和UDP区别</strong></p><p><strong>4、HTTP状态码你知道几个</strong></p><p><strong>5、请求的类型有哪些（get、post、delete、put）</strong></p><p><strong>6、get和post请求的区别（除了可以隐藏表单的作用）</strong></p><p><strong>7、前端请求发送到后台时，后台是怎么样找到处理请求的类的（我说反射，面试官说还有工厂模式也可以）</strong></p><p><strong>8、redis为什么那么快</strong></p><p><strong>9、redis怎么保证高并发的</strong></p><p>我说加锁，他说那个是防止数据库崩溃的，我说消息队列，那个是异步处理请求的。。然后我没答上来</p><p>可以通过限流的方式来进行，两种算法。令牌桶还有漏桶算法</p><p><strong>10、mysql索引的类型，你了解哪些索引</strong></p><p><strong>11、主键索引和唯一索引的区别</strong></p><p><strong>12、主键索引一定是自增么</strong></p><p>不一定。设置自增属性的列必须是主键 或者 加 UNIQUE索引</p><p>主键索引有唯一性，即不可以重复输入相同的值。</p><p><strong>13、哪些想问的</strong></p><p>知道就是知道，不知道就是不知道，不要绕。。</p><p>然后说我答得不好，测评做的也很差。。让我再做一份。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面经" scheme="http://wysblogs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://wysblogs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java1.8特性之Stream流式算法</title>
    <link href="http://wysblogs.top/2020/08/17/Java1-8%E7%89%B9%E6%80%A7%E4%B9%8BStream%E6%B5%81%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://wysblogs.top/2020/08/17/Java1-8特性之Stream流式算法/</id>
    <published>2020-08-17T00:17:14.000Z</published>
    <updated>2020-08-17T00:17:14.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java1.8特性之Lamda表达式</title>
    <link href="http://wysblogs.top/2020/08/17/Java1-8%E7%89%B9%E6%80%A7%E4%B9%8BLamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://wysblogs.top/2020/08/17/Java1-8特性之Lamda表达式/</id>
    <published>2020-08-17T00:16:24.000Z</published>
    <updated>2020-08-17T00:16:24.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://wysblogs.top/2020/08/17/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wysblogs.top/2020/08/17/工厂模式/</id>
    <published>2020-08-16T23:34:33.000Z</published>
    <updated>2020-08-16T23:34:33.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭州端点科技一面</title>
    <link href="http://wysblogs.top/2020/08/14/%E6%9D%AD%E5%B7%9E%E7%AB%AF%E7%82%B9%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2/"/>
    <id>http://wysblogs.top/2020/08/14/杭州端点科技一面/</id>
    <published>2020-08-14T02:40:18.000Z</published>
    <updated>2020-08-14T03:42:08.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="杭州端点科技一面"><a href="#杭州端点科技一面" class="headerlink" title="杭州端点科技一面"></a>杭州端点科技一面</h1><p>面试时候出了意外。emmm，谁知道阿里的电话全都被标记成广告推销了。。然后被电话拦截了。。还好发现及时，把关掉了，然后等了半个小时，面试官终于打电话过来了。。</p><p><strong>1、首先介绍一下自己</strong></p><p>我就说了来自哪个学校，21届毕业，然后介绍了两个项目内容。（一面就追着我的项目猛问。。）</p><p><strong>2、介绍一下我负责的模块（邮箱那一部分）</strong></p><p>我就说了邮箱是网易邮箱或者qq邮箱提供的服务，一开始是网易邮箱，但是发送效率太低了，我就换成了qq邮箱，邮箱发送是通过两个协议来完成了（SMTP协议，POP3协议），我是通过UUID作为唯一标识来给未激活的作为激活链接，然后根据不同的功能设置不同的内容。比如邮箱激活，邮箱验证，忘记密码等功能。。。巴啦啦说了一大堆。</p><p><strong>3、rsa算法是什么样的</strong></p><p>我只知道是加密算法。。原理不是很懂。</p><p><strong>4、登录怎么维持对象会话</strong></p><p>我说通过session进行会话连接。通过session存储个人信息进行各个功能的使用。</p><p><strong>5、redis缓存是怎么做的</strong></p><p>我说redis命名规则是根据阿里的redis明明规范来实现的，主要是缓存比赛时得分用的。如果大量访问数据库的话，可能会造成数据库负载，所以预先缓存到redis中，只有数据库数据变动时，才去把缓存设置失效，再把数据库的数据缓存下来。</p><p><strong>6、redis的基本数据类型</strong></p><p>我说了有string，set，sort set，hash，list</p><p>然后问我用过哪些。。我说只用过string，因为感觉其他的在项目中应用不到。</p><p><strong>7、redis还了解过其他的功能</strong></p><p>我说了解哨兵模式，然后说哨兵是一个集群。用来监控redis集群的，如果redis有问题，就通过api来告诉管理员或者其他应用程序。</p><p>然后说了流言协议。</p><p>最后说了持久化机制，RDB和AOF，RDB保存的是快照，有两种形式，一个是save，每次保存时会阻塞其他线程，另一种就是bgsave每次就是fork一个线程去后台保存快照。AOF是把所有数据写入文件，每次保存都是重新写入，时间慢，也是fork一个线程在后台进行重写。</p><p><strong>8、在什么条件下会使用RDB</strong></p><p>我说存的是快照，比较常用，存的是临时信息，如果数据改变的时候保存，或者是规定一个时间然后给他保存。</p><p><strong>9、数据库使用的是什么</strong></p><p>我说是mysql了解的是索引，引擎和范式</p><p>三个范式，第一个是列不能再分，具有原子性，第二个是列必须与主键息息相关，然后第三个是列必须与主键直接相关，不能在不同的表中进行关联。</p><p><strong>10、索引你用过吗</strong></p><p>我说只用过主键索引，使用Auto_Increment自增来作为主键。</p><p><strong>11、讲一下底层原理</strong></p><p>我说底层原理分为Hash索引还有是B+树索引，Hash索引是查找单个数据，不支持范围性查找，然后数据都存放在hash表中，如果产生hash冲突，就通过链地址法用链表串起来。</p><p>B+树的话，不能单独拿来说，因为这个要结合innodb引擎来说，innodb的数据文件和索引文件是分开的，B+树根节点存放的是索引，叶结点存放的是数据，一般是根据主键索引创建的，分为两种B+树，一种是根据字段创建的，根节点存放的都是字段值，叶结点存放的是主键索引，拿到主键索引之后会跑到主键索引创建的B+树中进行查找数据，这个是回表操作。然后MyiSam的话数据文件和索引都在一起，叶结点存放的就是数据，一次查询就能找到。而且B+树叶结点是通过链表串连起来的，是一个有序链表，支持范围性查找，而且相比较于其他结构来说磁盘IO次数比较少，查询效率高。</p><p><strong>12、SpringBoot对于Spring框架有什么不同</strong></p><p>Spring框架一般是用SSM框架来开发的，因为使用的是XML配置，所以比较繁琐，而SpringBoot是一种敏捷开发模型，通过注解形式避免了各种繁琐的配置，导包也是通过导入starter进行使用，比较方法，对于开发来说，其实很方便。</p><p><strong>13、starter工具包是怎么进行实现的</strong></p><p>SpringBoot启动的时候有 EnableAutoConfiguration，SpringBootConfiguation，ComponentScan 三个注解，然后启动的时候通过这三个注解把工具类注入到Spring容器中，然后直接在容器中进行使用。</p><p><strong>14、SpringMVC流程</strong></p><p>收到请求之后首先去DispacherServlet进行查询</p><p>然后从HandlerMapping找到具体的Controller类</p><p>之后执行完各种方法后，返回一个逻辑视图。</p><p><strong>15、项目中用过MVC的什么注解</strong></p><p>RequestMapping，就是请求映射路径</p><p>RestController，就是Controller和ResponseBody，一个就是把Controller类添加进容器中，另一个就是返回的逻辑视图转换成XML或者Json数据。</p><p>还用过哪些。。想了半天，说是GetMapping，或者PostMapping，还有Param。。就是把参数给他自动注入</p><p><strong>16、HashMap有什么了解</strong></p><p>HashMap底层结构说了说，1.7和1.8区别。然后初始参数，扩容因子，扩容倍数。put头插法的缺点。</p><p><strong>17、红黑树的特点</strong></p><p>就说了5个红黑树特点，然后说了说缺点，对比了AVL树，说了AVL的特点。</p><p><strong>18、HashMap线程不安全怎么办</strong></p><p>三种方法：1、Collections.synchronizedMap()方法进行代理，给所有调用的方法加锁。</p><p>2、Hashtable，然后说一下hashtable的特点</p><p>3、ConcurrentHashMap</p><p><strong>19、讲一下ConcurrentHashMap如何保证线程安全</strong></p><p>我说了说这个1.7和1.8不同的上锁规则，1.8之前都是锁分段技术，1.8之后是CAS+synchronized。说一下CAS特点和synchronized特点。最后因为synchronized在1.7和1.8之后有一个锁优化技术，就是锁有了升级过程。大量使用锁升级的话还是会对性能有影响。</p><p><strong>20、你还有什么问题吗</strong></p><p>公司技术栈。之类的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面经" scheme="http://wysblogs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://wysblogs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络面试知识</title>
    <link href="http://wysblogs.top/2020/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86/"/>
    <id>http://wysblogs.top/2020/08/13/计算机网络面试知识/</id>
    <published>2020-08-13T04:24:52.000Z</published>
    <updated>2020-08-21T05:58:40.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机网络面试知识"><a href="#计算机网络面试知识" class="headerlink" title="计算机网络面试知识"></a>计算机网络面试知识</h1><h2 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h2><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><h2 id="在浏览器输出URL执行后会发生什么？"><a href="#在浏览器输出URL执行后会发生什么？" class="headerlink" title="在浏览器输出URL执行后会发生什么？"></a>在浏览器输出URL执行后会发生什么？</h2><ul><li>查找域名对应的IP地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，ISPNDS缓存，根域名服务器</li><li>浏览器向IP对应的web服务器发送一个HTTP请求</li><li>服务器响应请求，发回网页内容</li><li>浏览器解析网页内容</li></ul><h2 id="OSI，TCP-IP，五层协议的体系结构"><a href="#OSI，TCP-IP，五层协议的体系结构" class="headerlink" title="OSI，TCP/IP，五层协议的体系结构"></a>OSI，TCP/IP，五层协议的体系结构</h2><p><strong>OSI分层 （7层）</strong>：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 </p><p><strong>TCP/IP分层（4层）</strong>：网络接口层、 网际层、运输层、 应用层。 </p><p><strong>五层协议   （5层）</strong>：物理层、数据链路层、网络层、运输层、 应用层。</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li><strong>1开头</strong>： 信息，服务器收到请求，需要请求者继续执行操作</li><li><strong>2开头：</strong>成功，操作被成功接收并处理</li><li><strong>3开头</strong>：重定向，需要进一步的操作以完成请求</li><li><strong>4开头</strong>：客户端错误，请求包含语法错误或无法完成请求</li><li><strong>5开头</strong>： 服务器错误，服务器在处理请求的过程中发生了错误</li></ul><p>200 OK</p><p>404 未发现</p><p>301 重定向</p><h2 id="TCP和UDP区别"><a href="#TCP和UDP区别" class="headerlink" title="TCP和UDP区别"></a>TCP和UDP区别</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>TCP是一个可靠的，面向连接的协议，在进行收发数据时候，必须建立连接，一个TCP必须经过三次 “会话” 才能建立起来。</li><li>TCP断开连接必须经过四次挥手阶段</li><li>TCP对系统资源要求较高</li><li>TCP保证了消息的顺序和正确性</li></ul><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul><li>UDP是一个非连接的，不可靠的消息，在发送消息的途中可能会丢包</li><li>UDP对系统资源要求较低</li><li>Ping命令采用的就是UDP形式的协议</li></ul><h2 id="Get请求和Post请求区别"><a href="#Get请求和Post请求区别" class="headerlink" title="Get请求和Post请求区别"></a>Get请求和Post请求区别</h2><ul><li>get发送请求时，数据会附在URL上面，以 ? 形式分割，参数用&amp;连接</li><li>post把提交的数据放在HTTP包中</li><li>get长度受限于URL的长度，如果没有限制的话，可以无限长</li><li>post是没有大小限制</li><li>post的安全性比get高</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://wysblogs.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://wysblogs.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Mysql范式和连接</title>
    <link href="http://wysblogs.top/2020/08/10/Mysql%E8%8C%83%E5%BC%8F%E5%92%8C%E8%BF%9E%E6%8E%A5/"/>
    <id>http://wysblogs.top/2020/08/10/Mysql范式和连接/</id>
    <published>2020-08-10T11:46:24.000Z</published>
    <updated>2020-08-13T03:44:55.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql范式和连接"><a href="#Mysql范式和连接" class="headerlink" title="Mysql范式和连接"></a>Mysql范式和连接</h1><h2 id="Mysql三大范式"><a href="#Mysql三大范式" class="headerlink" title="Mysql三大范式"></a>Mysql三大范式</h2><p>数据库设计都是依据范式来设计的，原因是为了规范逻辑结构，更好的解决数据冗余，数据的有效检查，提高存储效率。</p><ul><li>第一范式（1NF）的作用是要求每个关系的属性为原子性的，不可再分（列不可再分）。</li><li>第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一的区分（有唯一主键）。</li><li>第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息（列必须和主键直接相关）。</li></ul><h2 id="Mysql的连接查询"><a href="#Mysql的连接查询" class="headerlink" title="Mysql的连接查询"></a>Mysql的连接查询</h2><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left join on / left outer join on</span><br></pre></td></tr></table></figure><p>left join 是left outer join的简写，它的全称是左外连接，是外连接中的一种。</p><p>左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</p><p><img src="https://pic3.zhimg.com/80/v2-7a272cde9f87d216a836d93ac9718b2a_720w.jpg" alt="img"></p><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">right join on / right outer join on</span><br></pre></td></tr></table></figure><p>right join是right outer join的简写，它的全称是右外连接，是外连接中的一种。</p><p>与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</p><p><img src="https://pic4.zhimg.com/80/v2-7830dfdbb63723adfc30513890e73440_720w.jpg" alt="img"></p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inner join on</span><br></pre></td></tr></table></figure><p>组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集（阴影）部分。</p><p><img src="https://picb.zhimg.com/80/v2-1398fdcf77820b86fb352f608f1b231c_720w.jpg" alt="img"></p><h3 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h3><p>MySQL目前不支持此种方式，可以用其他方式替代解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://wysblogs.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://wysblogs.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>北森云计算一面</title>
    <link href="http://wysblogs.top/2020/08/10/%E5%8C%97%E6%A3%AE%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%80%E9%9D%A2/"/>
    <id>http://wysblogs.top/2020/08/10/北森云计算一面/</id>
    <published>2020-08-10T10:22:22.000Z</published>
    <updated>2020-08-10T11:54:06.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="北森云计算一面"><a href="#北森云计算一面" class="headerlink" title="北森云计算一面"></a>北森云计算一面</h1><p>上来就问我学java的对C#语言学习起来有困难吗？</p><p>我说我在学校接触过C#，还蛮好上手的，和java一样。。</p><p>然后让我介绍一下自己。我说了自己学校，姓名，然后介绍了两个项目。学校比赛报名系统和微信个人订阅号，</p><p>然后让我着重介绍了一下微信个人订阅号。我说用了 SpringBoot + redis + Jsoup + nginx 开发的</p><p>他说数据库用的啥 我说 mysql</p><p>然后就问我</p><p>1、 mysql三大范式。。我就记住了第一范式（字段不可再分，就是原子性）</p><ul><li><strong>第一范式(确保每列保持原子性)</strong></li><li><strong>第二范式(确保表中的每列都和主键相关)</strong></li><li><strong>第三范式(确保每列都和主键列直接相关,而不是间接相关)</strong></li></ul><p>2、之后问我连接分为什么种类，什么是左连接，什么是右连接。。</p><p>我直接懵逼，完全都没关注过这个是个啥。。。</p><p><strong>mysql连接查询：</strong></p><p><strong>左连接、右连接、内连接、全连接</strong></p><ul><li>左连接</li><li>右连接</li><li>内连接</li><li>全连接</li></ul><p>具体的内容都总结在我的博客里。</p><p>3、接下来问了mysql索引种类有哪些</p><p>我少说了普通索引。。。一共有5类</p><ul><li>普通索引</li><li>主键索引</li><li>唯一索引</li><li>组合索引</li><li>全文索引</li></ul><p>至少得把每种作用说一说。</p><p>4、说给你一个sql语句，你怎么去优化</p><p>我先说了 用explain查看一下效率和运行情况</p><p>然后我说了加索引，或者优化一下sql语句，或者把mysql所在的服务器进行优化。减少磁盘IO，也可以使用redis把结果缓存。</p><p>5、然后问了我nginx，说用了负载均衡。到底是怎么在使用的</p><p>我说配置了nginx.conf文件。把项目的ip地址给添加上去进行映射</p><p>然后问了我用过<strong>反代</strong>吗。。我说没有。。（反向代理）</p><p>6、问了问redis的缓存穿透和缓存预热。。</p><p>我说了缓存穿透和缓存预热的特点。和解决方法。顺便把缓存雪崩也说了说</p><p>他让我把缓存预热解决方法说一说。我说用setnx()加锁。每次访问都进行阻塞，然后防止数据库负载过大</p><p>7、然后问我了解过微服务架构吗。</p><p>我说没有，我只了解过dubbo的RPC远程调用服务原理。</p><p>就说了说远程服务暴露的过程。先暴露在本地。然后暴露到zookeeper上面，作为提供者，还有个消费者。就是从zookeeper上面进行消费，调用过程就像调用本地方法一样，安全透明，没有外来api侵入。</p><p>8、然后问我bootstrap框架了解吗。</p><p>我说了解，告诉他这个就是人家把样式全部写好，然后自己想用那一部分直接拷贝粘贴过来，修改一下中间的文字。</p><p>他说水平栅格了解过吗，讲讲实现原理。。我说不知道。我用的是可视化界面进行拖拽生成的。根本不去了解这些底层原理。</p><p>9、问我webapi了解过吗</p><p>我说前后端假如在一个项目中，后端使用RequestMapping()提供api接口，前端使用ajax进行访问。这种接口就是webapi接口</p><p>10、接下来问的都是计算机网络和操作系统了。</p><p>首先问我HTTP是什么。。我说是超文本传输协议。。然后原理也不是很了解</p><p>他问我TCP了解过吗。我结合了UDP说了说，大概就是TCP是一个可靠的面向连接的协议，UDP是一种无状态无连接的协议。</p><p>TCP传输内容可能多一点，如果传输内容少的话。UDP可能会更快一些。TCP通信需要建立连接才能通信，UDP只管发送不管对面在不在。。</p><p>之后问我TCP三次握手，我说第一次握手是客户端发送给服务器，然后告诉服务器说我要和你连接了，服务器收到后发送数据包给客户端，说收到了，我同意和你连接，然后客户端最后发送一个包告诉服务器说开始连接了。</p><p>TCP三次握手要检查客户端和服务器是否接受和发送都没问题，第一次发送检查的是客户端的发送，第二次检查的是服务器的发送和服务器的接受，最后一次就是客户端的接受，如果都没问题就可以开始连接了。</p><p>11、最后问了我进程和线程区别</p><p>我说进程时资源调度的最小单位，线程是依赖进程存在的，负责进程的操作，单线程也可以看作一个进程。（答得不好）</p><p><strong>进程和线程区别：</strong></p><p><strong>进程是资源分配的最小单位，线程是CPU调度的最小单位</strong></p><ul><li>线程在进程下执行</li><li>一个进程可以包含多个线程</li><li>不同进程间数据很难共享</li><li>同一进程下不同线程间数据很易共享</li><li>进程要比线程消耗更多的计算机资源</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉</li></ul><p><strong>感悟</strong></p><p>我觉得这次答得太水了。。大概率挂掉了，专心复习然后找其他公司把。还是面试可以检测自己到底哪里有问题。要针对薄弱的地方进行复习了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面经" scheme="http://wysblogs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://wysblogs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>IP地址范围</title>
    <link href="http://wysblogs.top/2020/08/09/IP%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4/"/>
    <id>http://wysblogs.top/2020/08/09/IP地址范围/</id>
    <published>2020-08-09T03:18:10.000Z</published>
    <updated>2020-08-09T03:21:21.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IP地址范围"><a href="#IP地址范围" class="headerlink" title="IP地址范围"></a>IP地址范围</h1><p>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来<strong>屏蔽物理地址的差异</strong>。</p><h2 id="1、A类IP地址"><a href="#1、A类IP地址" class="headerlink" title="1、A类IP地址"></a>1、A类IP地址</h2><p>一个A类IP地址是指， 在IP地址的四段du号码中，第一段号码为网zhi络号码，剩下的三dao段号码为本地计算机的号码。A类IP地址中网络的标识长度为8位，主机标识的长度为24位，A类网络地址数量较少，有126个网络，每个网络可以容纳主机数达1600多万台。</p><p><strong>A类IP地址 地址范围1.0.0.1到127.255.255.254。</strong></p><h2 id="2、B类IP地址"><a href="#2、B类IP地址" class="headerlink" title="2、B类IP地址"></a>2、B类IP地址</h2><p>一个B类IP地址是指，在IP地址的四段号码中，前两段号码为网络号码。B类IP地址中网络的标识长度为16位，主机标识的长度为16位，B类网络地址适用于中等规模的网络，有16384个网络，每个网络所能容纳的计算机数为6万多台。</p><p><strong>B类IP地址地址范围128.0.0.1-191.255.255.254。</strong></p><h2 id="3、C类IP地址"><a href="#3、C类IP地址" class="headerlink" title="3、C类IP地址"></a>3、C类IP地址</h2><p>一个C类IP地址是指，在IP地址的四段号码中，前三段号码为网络号码，剩下的一段号码为本地计算机的号码。C类IP地址中网络的标识长度为24位，主机标识的长度为8位，C类网络地址数量较多，有209万余个网络。适用于小规模的局域网络，每个网络最多只能包含254台计算机。</p><p><strong>C类IP地址范围192.0.0.1-223.255.255.254。</strong></p><h2 id="4、D类IP地址"><a href="#4、D类IP地址" class="headerlink" title="4、D类IP地址"></a>4、D类IP地址</h2><p>D类IP地址在历史上被叫做多播地址，即组播地址。在以太网中，多播地址命名了一组应该在这个网络中应用接收到一个分组的站点。多播地址的最高位必须是“1110”，<strong>范围从224.0.0.0到239.255.255.255。</strong></p><h2 id="5、E类IP地址"><a href="#5、E类IP地址" class="headerlink" title="5、E类IP地址"></a>5、E类IP地址</h2><p><strong>E类IP地址中是以“11110”开头</strong>，E类IP地址都保留用于将来和实验使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://wysblogs.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://wysblogs.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap详解</title>
    <link href="http://wysblogs.top/2020/08/05/LinkedHashMap%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wysblogs.top/2020/08/05/LinkedHashMap详解/</id>
    <published>2020-08-05T02:45:31.000Z</published>
    <updated>2020-08-17T01:18:11.699Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LinkedHashMap详解"><a href="#LinkedHashMap详解" class="headerlink" title="LinkedHashMap详解"></a>LinkedHashMap详解</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个也是一个map集合，底层继承的是<code>HashMap</code>，而且实现了Map接口，所以特性和HashMap一样，但是唯一不同的就是输出顺序不一样。</p><p><strong>特点：</strong>LinkedHashMap 是根据插入或访问顺序实现有序输出的HashMap</p><p><strong>数据结构：</strong>采用的是HashMap+双向链表    </p><p><strong>应用：</strong>LRU 缓存过期策略</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://pic4.zhimg.com/80/v2-a821a76fb84ce6223598c89ae8ebe7b0_720w.jpg" alt="img"></p><h2 id="LinkedHashMap和HashMap区别"><a href="#LinkedHashMap和HashMap区别" class="headerlink" title="LinkedHashMap和HashMap区别"></a>LinkedHashMap和HashMap区别</h2><p><code>LinkedHashMap</code>比<code>HashMap</code>多了一个双向链表的维护。</p><p>其他地方和Map并没有什么区别，对于<code>put()</code>方法来说，重写了<code>put()</code>方法中的<code>newNode()</code></p><p><strong>插入顺序来说：</strong>最常用的放在链表的最末端，最不常用的放在链表的开头。</p><p><strong>两个重要方法：</strong></p><ul><li><code>removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code> 来判断是否是最久未被使用的元素。</li><li><code>afterNodeInsertion(boolean evict)</code> 判断是否需要删除最久未被使用的元素。</li></ul><h2 id="AccessOrder模式"><a href="#AccessOrder模式" class="headerlink" title="AccessOrder模式"></a>AccessOrder模式</h2><p>LinkedHashMap可以设置两种遍历顺序：</p><ul><li>访问顺序（access-ordered）</li><li>插入顺序（insertion-ordered）</li><li><strong>默认是插入顺序的</strong></li></ul><p>对于 <strong>访问顺序</strong> 来说，他是LRU算法的实现，即<strong>最近最少使用的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以通过这个方法来选择是否采用访问顺序</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> accessOrder)</span></span></span><br></pre></td></tr></table></figure><p><strong>一般要扩展成<code>LRUMap</code>时要使用这个模式。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据结构" scheme="http://wysblogs.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://wysblogs.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security学习</title>
    <link href="http://wysblogs.top/2020/08/05/Spring-Security%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wysblogs.top/2020/08/05/Spring-Security学习/</id>
    <published>2020-08-05T02:05:41.000Z</published>
    <updated>2020-08-05T02:05:41.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis基础知识</title>
    <link href="http://wysblogs.top/2020/07/30/Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://wysblogs.top/2020/07/30/Mybatis基础知识/</id>
    <published>2020-07-30T01:48:38.000Z</published>
    <updated>2020-08-13T03:56:51.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis基础知识"><a href="#Mybatis基础知识" class="headerlink" title="Mybatis基础知识"></a>Mybatis基础知识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。</p><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>基于Sql语句编程，解耦合，SQL全部写在XML中，方便管理，而且不会对应用程序或者数据库设计造成任何影响</li><li>兼容性好，支持各类数据库</li><li>支持对象和数据库的ORM字段关系映射</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>sql语句编写工作量大。</li><li>sql语句依赖于数据库，移植性差。</li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>1、#{}和${}的区别是什么？</strong></p><p>#{}是预编译处理，${}是字符串替换。</p><p>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>Mybatis在处理${}时，就是把${}替换成变量的值。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><p><strong>2、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</strong></p><p>1、在查询的sql语句中定义字段名的别名，让字段名的别名和实体类属性名一致。</p><p>2、 通过&lt;resultMap&gt;来映射字段名和实体类属性名的一一对应的关系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mybatis" scheme="http://wysblogs.top/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://wysblogs.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>对象头大小分配</title>
    <link href="http://wysblogs.top/2020/07/30/%E5%AF%B9%E8%B1%A1%E5%A4%B4%E5%A4%A7%E5%B0%8F%E5%88%86%E9%85%8D/"/>
    <id>http://wysblogs.top/2020/07/30/对象头大小分配/</id>
    <published>2020-07-30T01:47:56.000Z</published>
    <updated>2020-07-31T03:38:13.342Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="对象头大小分配"><a href="#对象头大小分配" class="headerlink" title="对象头大小分配"></a>对象头大小分配</h1><p><strong>1、在32位系统下，存放Class指针的空间大小是4字节，MarkWord是4字节，对象头为8字节。</strong></p><p><strong>2、在64位系统下，存放Class指针的空间大小是8字节，MarkWord是8字节，对象头为16字节。</strong></p><p><strong>3、在64位开启指针压缩的情况下 -XX:+UseCompressedOops，存放Class指针的空间大小是4字节，MarkWord是8字节，对象头为12字节。</strong></p><p><strong>4、如果对象是数组，那么额外增加4个字节</strong></p><h2 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h2><p>最后一块对齐填充空间并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。这是由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jvm" scheme="http://wysblogs.top/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://wysblogs.top/tags/jvm/"/>
    
  </entry>
  
</feed>
