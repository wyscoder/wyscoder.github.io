<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wys&#39;blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wysblogs.top/"/>
  <updated>2020-05-02T08:03:50.647Z</updated>
  <id>http://wysblogs.top/</id>
  
  <author>
    <name>wys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用算法模板</title>
    <link href="http://wysblogs.top/2020/05/02/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <id>http://wysblogs.top/2020/05/02/常用算法模板/</id>
    <published>2020-05-02T08:02:12.000Z</published>
    <updated>2020-05-02T08:03:50.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用算法模板整理"><a href="#常用算法模板整理" class="headerlink" title="常用算法模板整理"></a>常用算法模板整理</h1><h2 id="八大排序算法"><a href="#八大排序算法" class="headerlink" title="八大排序算法"></a>八大排序算法</h2><p><img src="/upload/%E7%AE%97%E6%B3%95/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png" alt="img"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">将大数交换到右边 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">swap(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">bubble_sort(arr,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果左边大于右边说明已经找不到可以互换的了，排序结束 </span></span><br><span class="line"><span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基准 </span></span><br><span class="line"><span class="keyword">int</span> temp = arr[left];</span><br><span class="line"><span class="comment">//i,j分别等于边界值，t用来交换值 </span></span><br><span class="line"><span class="keyword">int</span> i=left,j=right,t;</span><br><span class="line"><span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line"><span class="comment">//判断左右是否大于或者小于基准 </span></span><br><span class="line"><span class="keyword">while</span>(arr[j]&gt;=temp&amp;&amp;i&lt;j)&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(arr[i]&lt;=temp&amp;&amp;i&lt;j)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">t = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序结束进行基准归位</span></span><br><span class="line"><span class="comment">//基准和最左边的数交换位置 </span></span><br><span class="line">arr[left] = arr[i]; </span><br><span class="line">arr[i] = temp;</span><br><span class="line"><span class="comment">//归位后进行排除头和尾进行下次交换</span></span><br><span class="line">quick_sort(arr,left,j<span class="number">-1</span>);</span><br><span class="line">quick_sort(arr,i+<span class="number">1</span>,right); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">quick_sort(arr,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：在第i个元素开始向右查找，遇到左边大于右边的就交换位置</span></span><br><span class="line"><span class="comment">每次循环都需要把一个最小元素移动到数组左边 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>&amp;&amp;arr[j<span class="number">-1</span>]&gt;arr[j];j--)&#123;</span><br><span class="line">swap(arr[j<span class="number">-1</span>],arr[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">insert_sort(arr,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">希尔排序思路：</span></span><br><span class="line"><span class="comment"> 根据增量把数组分成几个小数组</span></span><br><span class="line"><span class="comment"> 插入排序完成后慢慢减小增量</span></span><br><span class="line"><span class="comment"> 使得数组在有一定顺序的基础上继续排序</span></span><br><span class="line"><span class="comment"> 提高排序效率 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N = length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最外层的控制增量 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> gap=N/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对每个组进行插入排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=gap;i&lt;N;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将arr[i]插入到正确的位置 </span></span><br><span class="line"><span class="keyword">int</span> v = arr[i];</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="comment">//插入的时候按组进行插入（组内元素两两相隔gap） </span></span><br><span class="line"><span class="keyword">for</span>(j=i-gap;j&gt;=<span class="number">0</span>&amp;&amp;v&lt;arr[j];j-=gap)&#123;</span><br><span class="line">arr[j+gap] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line">arr[j+gap] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">8</span>;</span><br><span class="line">shell_sort(arr,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序-1"><a href="#插入排序-1" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择排序思路：</span></span><br><span class="line"><span class="comment">每次把最小的选出来放到前边 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> minn = i; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[minn])&#123;</span><br><span class="line">minn = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr[minn],arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">select_sort(arr,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立父节点和子节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="comment">//建立父节点指标和子节点指标 </span></span><br><span class="line"><span class="keyword">int</span> f = start;</span><br><span class="line"><span class="keyword">int</span> s = f*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//若子节点指标在范围内才做比较 </span></span><br><span class="line"><span class="keyword">while</span>(s&lt;=end)&#123;</span><br><span class="line"><span class="comment">//先比较两个子节点大小，选择最大的 </span></span><br><span class="line"><span class="keyword">if</span>(s+<span class="number">1</span>&lt;=end&amp;&amp;arr[s]&lt;arr[s+<span class="number">1</span>])&#123; </span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果父节点大于子节点则表示调整完毕，直接跳出循环 </span></span><br><span class="line"><span class="keyword">if</span>(arr[f]&gt;arr[s])&#123;  </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//佛瑞泽交换父子内容再继续子节点和孙节点比较 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">swap(arr[f],arr[s]);</span><br><span class="line">f = s;</span><br><span class="line">s = f*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//堆排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化，i从最后一个父节点开始调整</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">max_heapify(arr,i,len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先将第一个元素和已经排好的元素前一位做交换，再重新调整，直到排序完成 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">swap(arr[<span class="number">0</span>],arr[i]);</span><br><span class="line">max_heapify(arr,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">heap_sort(arr,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">归并排序思路：</span></span><br><span class="line"><span class="comment">一直分隔，直到剩最后一个然后归并进行排序 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> aux[r-l+<span class="number">1</span>],i,j,k;</span><br><span class="line"><span class="keyword">for</span>(k=l;k&lt;=r;k++) &#123;</span><br><span class="line">aux[k-l] = arr[k];</span><br><span class="line">&#125;</span><br><span class="line">i = l;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(k=l;k&lt;=r;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">arr[k] = aux[j-l];</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;r) &#123;</span><br><span class="line">arr[k] = aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(aux[i-l]&gt;aux[j-l])&#123;</span><br><span class="line">arr[k] = aux[j-l];</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">arr[k] = aux[i-l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">merge_sort(arr,l,mid);</span><br><span class="line">merge_sort(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">merge(arr,l,r,mid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">merge_sort(arr,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//迭代运算，把值转化成二进制进行迭代 </span></span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求(a^b)%mod次方 </span></span><br><span class="line">ll ans = <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//如果b为奇数 </span></span><br><span class="line"><span class="comment">//类似于 b % 2 == 1 </span></span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans = ans * a % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a的平方 </span></span><br><span class="line">a = a * a % mod;</span><br><span class="line"><span class="comment">//b右移相当于b/2 </span></span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,pow_mod(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1000</span>)); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长递增子序列和"><a href="#最长递增子序列和" class="headerlink" title="最长递增子序列和"></a>最长递增子序列和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125; </span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;num[j]) &#123;</span><br><span class="line">ans = max(dp[j],ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[i] = ans + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dp[i]&gt;x) x = dp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">1005</span>],y[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,x+<span class="number">1</span>,y+<span class="number">1</span>);</span><br><span class="line">x[<span class="number">0</span>] = y[<span class="number">0</span>] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(x)&gt;<span class="built_in">strlen</span>(y)?<span class="built_in">strlen</span>(x):<span class="built_in">strlen</span>(y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j,i=<span class="number">1</span>;i&lt;<span class="built_in">strlen</span>(x);i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="built_in">strlen</span>(y);j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x[i] == y[j]) &#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j]&gt;dp[i][j<span class="number">-1</span>]?dp[i<span class="number">-1</span>][j]:dp[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,dp[<span class="built_in">strlen</span>(x)<span class="number">-1</span>][<span class="built_in">strlen</span>(y)<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共上升子序列"><a href="#最长公共上升子序列" class="headerlink" title="最长公共上升子序列"></a>最长公共上升子序列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll p[<span class="number">1005</span>],q[<span class="number">1005</span>],ans,dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">ll cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(p[i]&gt;q[j]&amp;&amp;dp[i<span class="number">-1</span>][j]&gt;cur) cur = dp[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(p[i]==q[j]) dp[i][j] = cur+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)ans=max(ans,dp[n][i]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre[x]!=x)&#123;</span><br><span class="line">        pre[x] = find(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x);</span><br><span class="line">    <span class="keyword">int</span> fy = find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">        pre[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFS遍历图"><a href="#DFS遍历图" class="headerlink" title="DFS遍历图"></a>DFS遍历图</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">65535</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> Ne,Nv;</span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">visited[n] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>((visited[i]!=<span class="number">1</span>&amp;&amp;<span class="built_in">map</span>[n][i]!=INF))&#123;</span><br><span class="line">DFS(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="comment">//先输入点，在输入边 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;Nv,&amp;Ne);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Nv;j++) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">visited[i] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Ne;i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">map</span>[a][b] = <span class="built_in">map</span>[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[i])</span><br><span class="line">DFS(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试数据</span></span><br><span class="line"><span class="comment">8 6</span></span><br><span class="line"><span class="comment">0 7</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">0 1 4 2 7 3 5 6 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="DFS全排列"><a href="#DFS全排列" class="headerlink" title="DFS全排列"></a>DFS全排列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">11</span>],num[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth&gt;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num[j]&lt;&lt;<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!visit[i])&#123;</span><br><span class="line">visit[i] = <span class="number">1</span>;</span><br><span class="line">num[depth] = i;</span><br><span class="line">dfs(depth+<span class="number">1</span>);</span><br><span class="line">visit[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">visit[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS遍历图"><a href="#BFS遍历图" class="headerlink" title="BFS遍历图"></a>BFS遍历图</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 65535</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> Nv,Ne;</span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> que[Nv];</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">que[tail++] = n;</span><br><span class="line">visited[n] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(head!=tail) &#123;</span><br><span class="line"><span class="keyword">int</span> m = que[head++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(visited[i]!=<span class="number">1</span>&amp;&amp;<span class="built_in">map</span>[m][i]!=INF)&#123;</span><br><span class="line">que[tail++] = i;</span><br><span class="line">visited[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Nv&gt;&gt;Ne;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Nv;j++)&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">visited[i] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Ne;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">map</span>[a][b] = <span class="built_in">map</span>[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">BFS(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试用例</span></span><br><span class="line"><span class="comment">8 6</span></span><br><span class="line"><span class="comment">0 7</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">0 1 2 7 4 3 5 6 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="BFS最短迷宫路径"><a href="#BFS最短迷宫路径" class="headerlink" title="BFS最短迷宫路径"></a>BFS最短迷宫路径</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 65535</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//路径长度 </span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//迷宫地图 </span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P; <span class="comment">//节点坐标 </span></span><br><span class="line">P p; </span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sx = <span class="number">0</span>,sy = <span class="number">0</span>; <span class="comment">//起始坐标 </span></span><br><span class="line"><span class="keyword">int</span> ex = <span class="number">4</span>,ey = <span class="number">4</span>; <span class="comment">//出口坐标</span></span><br><span class="line"><span class="keyword">int</span> N,M; <span class="comment">//迷宫大小</span></span><br><span class="line"><span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++) &#123;</span><br><span class="line">vis[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[sx][sy] = <span class="number">1</span>;<span class="comment">//表示起始路径长度</span></span><br><span class="line">que.push(P(sx,sy));</span><br><span class="line"><span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">p = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x = p.first + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = p.second + dy[i];</span><br><span class="line"><span class="comment">//在范围内，并且没有被访问过，而且是通路 </span></span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;N&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;M&amp;&amp;<span class="built_in">map</span>[x][y]!=<span class="number">1</span>&amp;&amp;vis[x][y]==INF)&#123;</span><br><span class="line">que.push(P(x,y));</span><br><span class="line">vis[x][y] = vis[p.first][p.second] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p.first==ex&amp;&amp;p.second==ey)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">N = <span class="number">5</span>; M = <span class="number">5</span>;<span class="comment">//初始化迷宫大小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,vis[N<span class="number">-1</span>][M<span class="number">-1</span>]);</span><br><span class="line"><span class="comment">/*printf("%d",vis[N-1][M-1]);</span></span><br><span class="line"><span class="comment">for(int i=0;i&lt;5;i++) &#123;</span></span><br><span class="line"><span class="comment">for(int j=0;j&lt;5;j++)&#123;</span></span><br><span class="line"><span class="comment">printf("%d ",vis[i][j]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*测试用例</span></span><br><span class="line"><span class="comment">0 1 0 0 0</span></span><br><span class="line"><span class="comment">0 1 0 1 0</span></span><br><span class="line"><span class="comment">0 0 0 0 0</span></span><br><span class="line"><span class="comment">0 1 1 1 0</span></span><br><span class="line"><span class="comment">0 0 0 1 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="最小生成树（克鲁斯卡尔算法）"><a href="#最小生成树（克鲁斯卡尔算法）" class="headerlink" title="最小生成树（克鲁斯卡尔算法）"></a>最小生成树（克鲁斯卡尔算法）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |Kruskal算法|</span></span><br><span class="line"><span class="comment">    |适用于 稀疏图 求最小生成树|</span></span><br><span class="line"><span class="comment">    |16/11/05ztx thanks to wangqiqi|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一步：点、边、加入vector，把所有边按从小到大排序</span></span><br><span class="line"><span class="comment">    第二步：并查集部分 + 下面的code</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    ans = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;len; i++) &#123;    </span><br><span class="line">        <span class="keyword">if</span> (Find(edge[i].a) != Find(edge[i].b)) &#123;    </span><br><span class="line">            Union(edge[i].a, edge[i].b);    </span><br><span class="line">            ans += edge[i].len;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迪杰斯特拉算法（单源最短路径）"><a href="#迪杰斯特拉算法（单源最短路径）" class="headerlink" title="迪杰斯特拉算法（单源最短路径）"></a>迪杰斯特拉算法（单源最短路径）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 65535</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,min;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">dist[i] = <span class="built_in">map</span>[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">min = INF;</span><br><span class="line"><span class="comment">//先找最短的路，要求该点没有被访问过，而且是距离的最小值 </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;dist[j]&lt;min)&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[k] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j] == <span class="number">0</span>&amp;&amp;dist[j]&gt;dist[k]+<span class="built_in">map</span>[k][j])&#123;</span><br><span class="line">dist[j] = dist[k] + <span class="built_in">map</span>[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,a,b,c;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n) &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">map</span>[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c&lt;<span class="built_in">map</span>[a][b])&#123;</span><br><span class="line"><span class="built_in">map</span>[b][a] = <span class="built_in">map</span>[a][b] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dist[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">poj 2387</span></span><br><span class="line"><span class="comment">样例： </span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2 20</span></span><br><span class="line"><span class="comment">2 3 30</span></span><br><span class="line"><span class="comment">3 4 20</span></span><br><span class="line"><span class="comment">4 5 20</span></span><br><span class="line"><span class="comment">1 5 100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果 </span></span><br><span class="line"><span class="comment">90</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">dis[i][j] = min(dis[i][j],dis[i][k)+dis[k][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递闭包 判断两点是否联通 </span></span><br><span class="line"><span class="keyword">void</span> Floyd() &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">dis[i][j] |= dis[i][k] &amp; dis[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求解将哪些物品装入背包可使价值总和最大 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nmax=<span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> v[nmax];<span class="comment">//v[i]表示第i个物品的价值value </span></span><br><span class="line"><span class="keyword">int</span> w[nmax];<span class="comment">//w[i]表示第i个物品的重量weight </span></span><br><span class="line"><span class="keyword">int</span> dp[nmax];<span class="comment">//总价值 </span></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//n表示物品数量，m表示背包容量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//一维数组实现的01背包模板 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//遍历n个物品 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//01背包容量 逆序遍历</span></span><br><span class="line">  <span class="keyword">if</span>(j&gt;=w[i])&#123;</span><br><span class="line">  dp[j]=max(dp[j],(dp[j-w[i]]+v[i]));</span><br><span class="line">  &#125;<span class="comment">//第i个物体不选，dp[j]=dp[j];</span></span><br><span class="line">   <span class="comment">//第i个物体若选dp[j]=dp[j-w[i]]+v[i]</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nmax=<span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> v[nmax];<span class="comment">//v[i]表示第i个物品的价值value </span></span><br><span class="line"><span class="keyword">int</span> w[nmax];<span class="comment">//w[i]表示第i个物品的重量weight </span></span><br><span class="line"><span class="keyword">int</span> dp[nmax];<span class="comment">//总价值 </span></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//n表示物品数量，m表示背包容量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//一维数组实现的完全背包模板 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//遍历n个物品 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;<span class="comment">//完全背包容量 顺序遍历</span></span><br><span class="line">  <span class="keyword">if</span>(j&gt;=w[i])&#123;</span><br><span class="line">  dp[j]=max(dp[j],(dp[j-w[i]]+v[i]));</span><br><span class="line">  &#125;<span class="comment">//第i个物体不选，dp[j]=dp[j];</span></span><br><span class="line">   <span class="comment">//第i个物体若选dp[j]=dp[j-w[i]]+v[i]</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wysblogs.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wysblogs.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>阿里Redis规范</title>
    <link href="http://wysblogs.top/2020/04/22/%E9%98%BF%E9%87%8CRedis%E8%A7%84%E8%8C%83/"/>
    <id>http://wysblogs.top/2020/04/22/阿里Redis规范/</id>
    <published>2020-04-22T02:47:35.000Z</published>
    <updated>2020-04-24T10:49:49.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="阿里云Redis规范"><a href="#阿里云Redis规范" class="headerlink" title="阿里云Redis规范"></a>阿里云Redis规范</h1><h2 id="一、键值设计"><a href="#一、键值设计" class="headerlink" title="一、键值设计"></a>一、键值设计</h2><h3 id="1、key名设计"><a href="#1、key名设计" class="headerlink" title="1、key名设计"></a><strong>1、key名设计</strong></h3><p><strong>(1)【建议】: 可读性和可管理性</strong></p><blockquote><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</p></blockquote><p>ugc:video:1</p><p><strong>(2)【建议】：简洁性</strong></p><blockquote><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：</p></blockquote><p>user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。</p><p><strong>(3)【强制】：不要包含特殊字符</strong></p><p>反例：包含空格、换行、单双引号以及其他转义字符</p><p>2、value设计</p><p><strong>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)</strong></p><p>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p><p>反例：一个包含200万个元素的list。</p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，查找方法和删除方法</p><p><strong>(2)【推荐】：选择适合的数据类型。</strong></p><p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p><p>反例：</p><blockquote><p>setuser:1:nametom</p><p>setuser:1:age19</p><p>setuser:1:favor football</p></blockquote><p>正例:</p><blockquote><p>hmsetuser:1nametomage19favorfootball</p></blockquote><p>3、【推荐】：控制key的生命周期，redis不是垃圾桶。</p><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p><h2 id="二、命令使用"><a href="#二、命令使用" class="headerlink" title="二、命令使用"></a>二、命令使用</h2><p><strong>1.【推荐】 O(N)命令关注N的数量</strong></p><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><p><strong>2.【推荐】：禁用命令</strong></p><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><p><strong>3.【推荐】合理使用select</strong></p><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><p><strong>4.【推荐】使用批量操作提高效率</strong></p><blockquote><p>原生命令：例如mget、mset。</p><p>非原生命令：可以使用pipeline提高效率。</p></blockquote><p>但要注意控制一次批量操作的<strong>元素个数</strong>(例如500以内，实际也和元素字节数有关)。</p><p>注意两者不同：</p><blockquote><p>1、原生是原子操作，pipeline是非原子操作。</p><p>2、pipeline可以打包不同的命令，原生做不到</p><p>3、pipeline需要客户端和服务端同时支持。</p></blockquote><p><strong>5.【建议】Redis事务功能较弱，不建议过多使用</strong></p><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p><p><strong>6.【建议】Redis集群版本在使用Lua上有特殊要求：</strong></p><p>1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，”-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS arrayrn”</p><p>2.所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slotrn”</p><p><strong>7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</strong></p><h2 id="三、客户端使用"><a href="#三、客户端使用" class="headerlink" title="三、客户端使用"></a>三、客户端使用</h2><p><strong>1.【推荐】</strong></p><p>避免多个应用使用一个Redis实例</p><p>正例：不相干的业务拆分，公共数据做服务化。</p><p><strong>2.【推荐】</strong></p><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p><p><strong>3.【建议】</strong></p><p>高并发下建议客户端添加熔断功能(例如netflix hystrix)</p><p><strong>4.【推荐】</strong></p><p>设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p><p><strong>5.【建议】</strong></p><p>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p><p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</p><p>其他策略如下：</p><p>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</p><p>allkeys-random：随机删除所有键，直到腾出足够空间为止。</p><p>volatile-random:随机删除过期键，直到腾出足够空间为止。</p><p>volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。</p><p>noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</p><h2 id="四、相关工具"><a href="#四、相关工具" class="headerlink" title="四、相关工具"></a>四、相关工具</h2><p><strong>1.【推荐】：数据同步</strong></p><p>redis间数据同步可以使用：redis-port</p><p><strong>2.【推荐】：big key搜索</strong></p><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fyq.aliyun.com%2Farticles%2F117042" target="_blank" rel="noopener">redis大key搜索工具</a></p><p><strong>3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)</strong></p><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Ffacebookarchive%2Fredis-faina" target="_blank" rel="noopener">facebook的redis-faina</a></p><blockquote><p>阿里云Redis已经在内核层面解决热点key问题，欢迎使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://wysblogs.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://wysblogs.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis初探</title>
    <link href="http://wysblogs.top/2020/04/21/Redis%E5%88%9D%E6%8E%A2/"/>
    <id>http://wysblogs.top/2020/04/21/Redis初探/</id>
    <published>2020-04-21T02:49:52.000Z</published>
    <updated>2020-04-21T02:50:32.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis初探"><a href="#Redis初探" class="headerlink" title="Redis初探"></a>Redis初探</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>下载压缩包</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.9.tar.gz</span><br></pre></td></tr></table></figure><p><strong>解压压缩包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.9.tar.gz</span><br><span class="line">#解压好感觉最好改个名字</span><br><span class="line">mv redis-5.0.9 redis</span><br></pre></td></tr></table></figure><p><strong>进入文件夹进行安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis</span><br><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure><p><strong>完成后进入src目录进行安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>启动服务</strong></p><p>刚开始运行是不支持后台的，得在配置文件中进行修改，然后读取配置文件运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/bin/redis/redis.conf</span><br><span class="line">#修改下面这个配置为yes</span><br><span class="line">daemonize no</span><br><span class="line">#然后指定配置文件运行</span><br><span class="line">./redis-server /usr/local/bin/redis/redis.conf</span><br></pre></td></tr></table></figure><p><strong>关闭进程</strong></p><p>如果想关闭的话得先找到pid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#找PID有很多方法，我是习惯了这种从端口寻找的方法</span><br><span class="line">lsof -i:6379</span><br></pre></td></tr></table></figure><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>整合是整合到springboot中</p><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<strong>application.yml</strong>中进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#主机地址</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">6379</span> <span class="comment">#端口号</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span> <span class="comment">#自己设置的密码</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">1000</span> <span class="comment">#连接超时时间</span></span><br><span class="line"><span class="attr">      jedis:</span></span><br><span class="line"><span class="attr">        pool:</span></span><br><span class="line"><span class="attr">          max-active:</span> <span class="number">10</span> <span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">          max-wait:</span> <span class="bullet">-1</span> <span class="comment">#最大阻塞等待时间</span></span><br><span class="line"><span class="attr">          max-idle:</span> <span class="number">500</span> <span class="comment">#最大空闲数量</span></span><br><span class="line"><span class="attr">          min-idle:</span> <span class="number">0</span> <span class="comment">#最小空闲数量</span></span><br></pre></td></tr></table></figure><p>之后就可以写配置类进行测试了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查找到的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回布尔类型表示是否写入成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key,value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 更新的key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 更新的value值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否更新成功的布尔类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForValue().getAndSet(key,value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要删除的缓存的key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否删除成功的布尔类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在测试类中进行测试，我是测试之后没问题的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://wysblogs.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://wysblogs.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://wysblogs.top/2020/03/26/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysblogs.top/2020/03/26/Redis基础/</id>
    <published>2020-03-26T00:15:44.000Z</published>
    <updated>2020-03-26T00:19:55.343Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在<a href="https://redis.io/" target="_blank" rel="noopener">官网</a>下载，然后用ftp工具把下载的压缩包放到服务器上，解压缩</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>redis.conf 配置项说明如下：</p><table><thead><tr><th align="left">序号</th><th align="left">配置项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><code>daemonize no</code></td><td align="left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td align="left">2</td><td align="left"><code>pidfile /var/run/redis.pid</code></td><td align="left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td align="left">3</td><td align="left"><code>port 6379</code></td><td align="left">指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td align="left">4</td><td align="left"><code>bind 127.0.0.1</code></td><td align="left">绑定的主机地址</td></tr><tr><td align="left">5</td><td align="left"><code>timeout 300</code></td><td align="left">当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td></tr><tr><td align="left">6</td><td align="left"><code>loglevel notice</code></td><td align="left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td align="left">7</td><td align="left"><code>logfile stdout</code></td><td align="left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td></tr><tr><td align="left">8</td><td align="left"><code>databases 16</code></td><td align="left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td align="left">9</td><td align="left"><code>save &lt;seconds&gt; &lt;changes&gt;</code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong> <strong>save 300 10</strong> <strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td><td align="left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td align="left">10</td><td align="left"><code>rdbcompression yes</code></td><td align="left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td align="left">11</td><td align="left"><code>dbfilename dump.rdb</code></td><td align="left">指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td align="left">12</td><td align="left"><code>dir ./</code></td><td align="left">指定本地数据库存放目录</td></tr><tr><td align="left">13</td><td align="left"><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td><td align="left">设置当本机为 slav 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td align="left">14</td><td align="left"><code>masterauth &lt;master-password&gt;</code></td><td align="left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td align="left">15</td><td align="left"><code>requirepass foobared</code></td><td align="left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</password></td></tr><tr><td align="left">16</td><td align="left"><code>maxclients 128</code></td><td align="left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td align="left">17</td><td align="left"><code>maxmemory &lt;bytes&gt;</code></td><td align="left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td align="left">18</td><td align="left"><code>appendonly no</code></td><td align="left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td align="left">19</td><td align="left"><code>appendfilename appendonly.aof</code></td><td align="left">指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td align="left">20</td><td align="left"><code>appendfsync everysec</code></td><td align="left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td></tr><tr><td align="left">21</td><td align="left"><code>vm-enabled no</code></td><td align="left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td align="left">22</td><td align="left"><code>vm-swap-file /tmp/redis.swap</code></td><td align="left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td></tr><tr><td align="left">23</td><td align="left"><code>vm-max-memory 0</code></td><td align="left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td align="left">24</td><td align="left"><code>vm-page-size 32</code></td><td align="left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td align="left">25</td><td align="left"><code>vm-pages 134217728</code></td><td align="left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td align="left">26</td><td align="left"><code>vm-max-threads 4</code></td><td align="left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td></tr><tr><td align="left">27</td><td align="left"><code>glueoutputbuf yes</code></td><td align="left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td align="left">28</td><td align="left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td><td align="left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td align="left">29</td><td align="left"><code>activerehashing yes</code></td><td align="left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td align="left">30</td><td align="left"><code>include /path/to/local.conf</code></td><td align="left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h2 id="常用的数据类型及应用场景"><a href="#常用的数据类型及应用场景" class="headerlink" title="常用的数据类型及应用场景"></a>常用的数据类型及应用场景</h2><table><thead><tr><th align="left">类型</th><th align="left">简介</th><th align="left">特性</th><th align="left">场景</th></tr></thead><tbody><tr><td align="left">String(字符串)</td><td align="left">二进制安全</td><td align="left">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td align="left">—</td></tr><tr><td align="left">Hash(字典)</td><td align="left">键值对集合,即编程语言中的Map类型</td><td align="left">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td align="left">存储、读取、修改用户属性</td></tr><tr><td align="left">List(列表)</td><td align="left">链表(双向链表)</td><td align="left">增删快,提供了操作某一段元素的API</td><td align="left">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td align="left">Set(集合)</td><td align="left">哈希表实现,元素不重复</td><td align="left">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td align="left">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td align="left">Sorted Set(有序集合)</td><td align="left">将Set中的元素增加一个权重参数score,元素按score有序排列</td><td align="left">数据插入集合时,已经进行天然排序</td><td align="left">1、排行榜 2、带权重的消息队列</td></tr></tbody></table><h2 id="待更新。。。"><a href="#待更新。。。" class="headerlink" title="待更新。。。"></a>待更新。。。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://wysblogs.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://wysblogs.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>多模块开发踩坑</title>
    <link href="http://wysblogs.top/2020/03/17/%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/"/>
    <id>http://wysblogs.top/2020/03/17/多模块开发踩坑/</id>
    <published>2020-03-17T08:57:32.000Z</published>
    <updated>2020-03-18T07:32:07.156Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多模块开发踩坑"><a href="#多模块开发踩坑" class="headerlink" title="多模块开发踩坑"></a>多模块开发踩坑</h1><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p><img src="/upload/%E5%A4%9A%E6%A8%A1%E5%9D%97/%E5%A4%9A%E6%A8%A1%E5%9D%97.png" alt="多模块"></p><h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><p>1、 父pom文件内容，该写什么，什么部分不需要</p><p>2、 子pom文件内容，怎么去继承父模块</p><p>3、 怎么规范版本号，以及怎么统一包的版本</p><p>4、 怎么启动项目，怎么打包，怎么发布</p><p>5、 每个模块之前的packaging怎么填，谁需要打包，谁需要war，谁需要jar</p><p>6、 模块的子模块中还有子模块，这样的情况怎么调用和使用。</p><p>7、 application的配置到底属于哪一个模块</p><p>8、 relativePath到底需不需要（大坑）</p><p>9、 如果出现模块不一致怎么办</p><p>10、dependencyManagement和dependencies区别</p><p>11、多模块中怎么给需要的bean注入值</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>1、 写自己的版本号，把需要用的包使用 &lt;dependencyManagement&gt;&lt;/dependencyManagement&gt; 导入，如果子类继承父类后，如果需要包的话就直接导入不用指明版本号</p><p>2、 如果直接在父pom中使用 &lt;dependencies&gt;&lt;/dependencies&gt;  的话那么子类不管用不用都需要导入</p><p>3、 子pom文件直接导入父pom文件的版本号就行</p><p>4、 版本号写在父pom文件中，以及包的版本号统一在父pom文件中使用，而且不需要指定jar的version了</p><p>5、 启动项目，我感觉应该是web层进行启动项目</p><p>6、 打包问题，如果项目没有问题直接对父项目 clean + package 即可，最后生成的包在web模块中</p><p>7、 一般来说父模块一般都是用pom聚合，子模块都要打成jar包，war包则一般都是web模块</p><p>8、 父模块需要指定所有子模块，子模块相互调用是通过相互依赖来实现的</p><p>9、 application的配置一般在web模块中</p><p>10、relativePath看情况来判断，首先relativePath默认值为../pom.xml ，查找顺序：relativePath元素中的地址–本地仓库–远程仓库，设定一个空值将始终从仓库中获取，不从本地路径获取，如&lt;relativePath /&gt;</p><p>11、如果模块不一致，那么就需要打开project Structure，在模块中把右边不一致的模块删除</p><p>12、如果用dependencyManagement来指定依赖，那么子模块中默认不会有，需要使用的时候只需要导入坐标就行，不需要指定版本号，默认使用的是父模块中的版本号，如果使用dependencies的话，不管子模块中用不用得到，都会在子模块中显示依赖。</p><p>13、如果想要注入值，那么需要在springbootApplication的注解中进行添加扫包，把其他模块中的类扫描进来</p><p>例如这种格式 <code>@SpringBootApplication(scanBasePackages = {&quot;com.guidinglight&quot;})</code></p><h2 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h2><h3 id="parent模块"><a href="#parent模块" class="headerlink" title="parent模块"></a>parent模块</h3><p><strong>packaging</strong> 需要改成 pom，因为默认为jar类型，改成pom表示夫类型都是pom类型</p><p><strong>modules</strong> 把子模块全部添加进去</p><p><strong>dependencyManagement</strong> 把需要用到的依赖都给添加进去，如果需要使用直接导入依赖就行了</p><h3 id="child模块"><a href="#child模块" class="headerlink" title="child模块"></a><strong>child模块</strong></h3><p>就是正常使用即可，需要什么依赖直接添加</p><h2 id="待更新。。。"><a href="#待更新。。。" class="headerlink" title="待更新。。。"></a>待更新。。。</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/gdsgdh308227363/article/details/79722491" target="_blank" rel="noopener">https://blog.csdn.net/gdsgdh308227363/article/details/79722491</a></p><p><a href="https://blog.csdn.net/zwt0909/article/details/52218222" target="_blank" rel="noopener">https://blog.csdn.net/zwt0909/article/details/52218222</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开发经验" scheme="http://wysblogs.top/categories/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="开发经验" scheme="http://wysblogs.top/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>多模块项目理解</title>
    <link href="http://wysblogs.top/2020/03/17/%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3/"/>
    <id>http://wysblogs.top/2020/03/17/多模块项目理解/</id>
    <published>2020-03-17T01:44:13.000Z</published>
    <updated>2020-03-17T03:07:35.058Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多模块项目理解"><a href="#多模块项目理解" class="headerlink" title="多模块项目理解"></a>多模块项目理解</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>为什么要用多模块？</strong></p><p>1、 做项目首先讲究 “高内聚，低耦合”，因此传统的项目是将一个项目分为多个包，随着项目复杂，如果想复用一个模块的话，因为是包的形式，复用起来会很麻烦，耦合性很强，常用的方法就是复制代码修改，但是这样会做出很多无用功和增加出错几率。</p><p>2、 springboot多模块简单说，就是把包按分模块的模式，借助maven升级到jar方式，抽象性就更强了，假如jar再升级到war或者多个集合的jar，就成微服务了，在多模块jar模式下，可以将某个jar拿出来对外共用，能大大提高代码复用率和开发效率。</p><p>3、 开发者对自己或者别人负责的代码边界很模糊，这是复杂项目中最容易遇到的，导致结果就是开发者很容易修改别人代码，而且代码负责人还不知道，责任追踪很麻烦。</p><p>4、简单来说就是 高内聚，低耦合，容易维护，便于开发者确定自己负责的内容。</p><p>5、以上都是百度的。</p><h2 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h2><p>1、首先确定项目开发结构</p><p>2、创建最基本的项目模块</p><p>3、理清楚各模块之间的依赖关系</p><p>4、修改pom文件，统一版本号和使用的jar包版本，如果在此期间觉得哪几个模块能够合并，就优化一下</p><h2 id="可能会存在的问题"><a href="#可能会存在的问题" class="headerlink" title="可能会存在的问题"></a>可能会存在的问题</h2><p><strong>（1） 划分模块的方式</strong></p><p>划分模块主要根据是职责单一性和耦合性，如果是项目创建初期就使用多模块来规划项目，那么职责单一性就应该是首先考虑的，也就是通常意义上的按照层次划分，如果是从一个十分复杂的项目开始拆分，那么在划分模块的石航就不仅仅是考虑职责单一性了，职责单一会造成大量的子模块产生导致pom文件臃肿且不容易识别，如果将耦合性考虑进去就应该将关系较为紧密的模块合并降低模块的数量提高实用性。</p><p><strong>（2） 公有依赖的抽象</strong></p><p>parent中的以来配置主要是有一些公有的依赖，例如log，apache，commons，spring等，怎么界定一个依赖是否属于公有呢？一般情况下如果这个依赖被超过2/3的子模块所依赖就可以将其认定为公有依赖，另外也可以将依赖的某些配置（例如版本号）以parent中pom的属性的形式加以声明，这样在升级某些依赖的时候只要改动一处就行了（很类似C语言中的#define）</p><p><strong>（3） 模块的存在与消亡</strong></p><p>模块的划分并不是一成不变的，模块的存在就是为了方便维护和提高生产效率，如果某些模块不合理并且影响了开发效率，那么这些模块就需要再好好斟酌一下，一般情况下这种情况出现不是为了模块过于庞大就是因为模块的碎片化，对于前者需要拆分更多模块以提高复用和去除冗余，后者则需要酌情合并一些耦合性较高的模块。</p><p><strong>（4） 子模块的子模块</strong></p><p>这种情况的出现往往就意味着这个项目本身就应该被分成多个项目，多个项目之间也可以继承同一个parent的pom.xml这主要是为了方便统一构建多个项目。所以子模块的子模块应该避免出现。</p><h2 id="待更新。。。"><a href="#待更新。。。" class="headerlink" title="待更新。。。"></a>待更新。。。</h2><p>引用如下:  </p><p><a href="https://blog.csdn.net/wuzhenwei0419/article/details/84029454" target="_blank" rel="noopener">https://blog.csdn.net/wuzhenwei0419/article/details/84029454</a></p><p><a href="https://www.cnblogs.com/ruanjianlaowang/p/11214271.html" target="_blank" rel="noopener">https://www.cnblogs.com/ruanjianlaowang/p/11214271.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开发经验" scheme="http://wysblogs.top/categories/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="开发经验" scheme="http://wysblogs.top/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Centos基本信息和ssh</title>
    <link href="http://wysblogs.top/2019/12/12/Centos%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E5%92%8Cssh/"/>
    <id>http://wysblogs.top/2019/12/12/Centos基本信息和ssh/</id>
    <published>2019-12-12T13:26:22.000Z</published>
    <updated>2019-12-12T17:02:07.937Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos-基本信息和SSH"><a href="#Centos-基本信息和SSH" class="headerlink" title="Centos 基本信息和SSH"></a>Centos 基本信息和SSH</h1><h2 id="Centos介绍"><a href="#Centos介绍" class="headerlink" title="Centos介绍"></a>Centos介绍</h2><p>CentOS Linux是一个社区支持的发行版，该发行版来自在<a href="ftp://ftp.redhat.com/pub/redhat/linux/enterprise/" target="_blank" rel="noopener">Red Hat</a>或<a href="https://git.centos.org/" target="_blank" rel="noopener">CentOS git</a>上免费提供给公众的资源适用于Red Hat Enterprise Linux（RHEL）。因此，CentOS Linux旨在与RHEL在功能上兼容。CentOS专案主要更改软件包以删除上游供应商的品牌和艺术品。CentOS Linux是免费的，可以免费重新分发。每个CentOS版本都会得到维护，直到等效的RHEL版本不再受到一般支持为止。一旦重建了新的RHEL版本，便会提供一个新的CentOS版本-大约每6-12个月发行一次次要点发布，几年则更新一次主要版本。重建所需的时间从点发布的几周到主要版本变更的几个月不等。这样就形成了一个安全，低维护，可靠，可预测和可再现的Linux环境。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://wiki.centos.org/Download" target="_blank" rel="noopener">下载地址</a></strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">cd /home</td><td align="left">进入 ‘/home’ 目录</td></tr><tr><td align="left">cd ..</td><td align="left">返回上一级目录</td></tr><tr><td align="left">cd ../..</td><td align="left">返回上两级目录</td></tr><tr><td align="left">cd -</td><td align="left">返回上次所在目录</td></tr><tr><td align="left">cp file1 file2</td><td align="left">将file1复制为file2</td></tr><tr><td align="left">cp -a dir1 dir2</td><td align="left">复制一个目录</td></tr><tr><td align="left">cp -a /tmp/dir1 .</td><td align="left">复制一个目录到当前工作目录（.代表当前目录）</td></tr><tr><td align="left">ls</td><td align="left">查看目录中的文件</td></tr><tr><td align="left">ls -a</td><td align="left">显示隐藏文件</td></tr><tr><td align="left">ls -l</td><td align="left">显示详细信息</td></tr><tr><td align="left">ls -lrt</td><td align="left">按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）</td></tr><tr><td align="left">pwd</td><td align="left">显示工作路径</td></tr><tr><td align="left">mkdir dir1</td><td align="left">创建 ‘dir1’ 目录</td></tr><tr><td align="left">mkdir dir1 dir2</td><td align="left">同时创建两个目录</td></tr><tr><td align="left">mkdir -p /tmp/dir1/dir2</td><td align="left">创建一个目录树</td></tr><tr><td align="left">mv dir1 dir2</td><td align="left">移动/重命名一个目录</td></tr><tr><td align="left">rm -f file1</td><td align="left">删除 ‘file1’</td></tr><tr><td align="left">rm -rf dir1</td><td align="left">删除 ‘dir1’ 目录及其子目录内容</td></tr></tbody></table><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">cat file1</td><td align="left">从第一个字节开始正向查看文件的内容</td></tr><tr><td align="left">head -2 file1</td><td align="left">查看一个文件的前两行</td></tr><tr><td align="left">more file1</td><td align="left">查看一个长文件的内容</td></tr><tr><td align="left">tac file1</td><td align="left">从最后一行开始反向查看一个文件的内容</td></tr><tr><td align="left">tail -3 file1</td><td align="left">查看一个文件的最后三行</td></tr><tr><td align="left">vi file</td><td align="left">打开并浏览文件</td></tr></tbody></table><h3 id="文本内容处理"><a href="#文本内容处理" class="headerlink" title="文本内容处理"></a>文本内容处理</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">grep str /tmp/test</td><td align="left">在文件 ‘/tmp/test’ 中查找 “str”</td></tr><tr><td align="left">grep ^str /tmp/test</td><td align="left">在文件 ‘/tmp/test’ 中查找以 “str” 开始的行</td></tr><tr><td align="left">grep [0-9] /tmp/test</td><td align="left">查找 ‘/tmp/test’ 文件中所有包含数字的行</td></tr><tr><td align="left">grep str -r /tmp/*</td><td align="left">在目录 ‘/tmp’ 及其子目录中查找 “str”</td></tr><tr><td align="left">diff file1 file2</td><td align="left">找出两个文件的不同处</td></tr><tr><td align="left">sdiff file1 file2</td><td align="left">以对比的方式显示两个文件的不同</td></tr><tr><td align="left">vi file</td><td align="left">操作解析i进入编辑文本模式Esc退出编辑文本模式:w保存当前修改:q不保存退出vi:wq保存当前修改并退出vi</td></tr></tbody></table><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">find / -name file1</td><td align="left">从 ‘/’ 开始进入根文件系统查找文件和目录</td></tr><tr><td align="left">find / -user user1</td><td align="left">查找属于用户 ‘user1’ 的文件和目录</td></tr><tr><td align="left">find /home/user1 -name *.bin</td><td align="left">在目录 ‘/ home/user1’ 中查找以 ‘.bin’ 结尾的文件</td></tr><tr><td align="left">find /usr/bin -type f -atime +100</td><td align="left">查找在过去100天内未被使用过的执行文件</td></tr><tr><td align="left">find /usr/bin -type f -mtime -10</td><td align="left">查找在10天内被创建或者修改过的文件</td></tr><tr><td align="left">locate *.ps</td><td align="left">寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令</td></tr><tr><td align="left">find -name ‘*.[ch]’ | xargs grep -E ‘expr’</td><td align="left">在当前目录及其子目录所有.c和.h文件中查找 ‘expr’</td></tr><tr><td align="left">find -type f -print0 | xargs -r0 grep -F ‘expr’</td><td align="left">在当前目录及其子目录的常规文件中查找 ‘expr’</td></tr><tr><td align="left">find -maxdepth 1 -type f | xargs grep -F ‘expr’</td><td align="left">在当前目录中查找 ‘expr’</td></tr></tbody></table><h3 id="压缩、解压"><a href="#压缩、解压" class="headerlink" title="压缩、解压"></a>压缩、解压</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">bzip2 file1</td><td align="left">压缩 file1</td></tr><tr><td align="left">bunzip2 file1.bz2</td><td align="left">解压 file1.bz2</td></tr><tr><td align="left">gzip file1</td><td align="left">压缩 file1</td></tr><tr><td align="left">gzip -9 file1</td><td align="left">最大程度压缩 file1</td></tr><tr><td align="left">gunzip file1.gz</td><td align="left">解压 file1.gz</td></tr><tr><td align="left">tar -cvf archive.tar file1</td><td align="left">把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）</td></tr><tr><td align="left">tar -cvf archive.tar file1 dir1</td><td align="left">把 file1，dir1 打包成 archive.tar</td></tr><tr><td align="left">tar -tf archive.tar</td><td align="left">显示一个包中的内容</td></tr><tr><td align="left">tar -xvf archive.tar</td><td align="left">释放一个包</td></tr><tr><td align="left">tar -xvf archive.tar -C /tmp</td><td align="left">把压缩包释放到 /tmp目录下</td></tr><tr><td align="left">zip file1.zip file1</td><td align="left">创建一个zip格式的压缩包</td></tr><tr><td align="left">zip -r file1.zip file1 dir1</td><td align="left">把文件和目录压缩成一个zip格式的压缩包</td></tr><tr><td align="left">unzip file1.zip</td><td align="left">解压一个zip格式的压缩包到当前目录</td></tr><tr><td align="left">unzip test.zip -d /tmp/</td><td align="left">解压一个zip格式的压缩包到 /tmp 目录</td></tr></tbody></table><h3 id="yum安装器"><a href="#yum安装器" class="headerlink" title="yum安装器"></a>yum安装器</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">yum -y install [package]</td><td align="left">下载并安装一个rpm包</td></tr><tr><td align="left">yum localinstall [package.rpm]</td><td align="left">安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</td></tr><tr><td align="left">yum -y update</td><td align="left">更新当前系统中安装的所有rpm包</td></tr><tr><td align="left">yum update [package]</td><td align="left">更新一个rpm包</td></tr><tr><td align="left">yum remove [package]</td><td align="left">删除一个rpm包</td></tr><tr><td align="left">yum list</td><td align="left">列出当前系统中安装的所有包</td></tr><tr><td align="left">yum search [package]</td><td align="left">在rpm仓库中搜寻软件包</td></tr><tr><td align="left">yum clean [package]</td><td align="left">清除缓存目录（/var/cache/yum）下的软件包</td></tr><tr><td align="left">yum clean headers</td><td align="left">删除所有头文件</td></tr><tr><td align="left">yum clean all</td><td align="left">删除所有缓存的包和头文件</td></tr></tbody></table><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">ifconfig eth0</td><td align="left">显示一个以太网卡的配置</td></tr><tr><td align="left">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td align="left">配置网卡的IP地址</td></tr><tr><td align="left">ifdown eth0</td><td align="left">禁用 ‘eth0’ 网络设备</td></tr><tr><td align="left">ifup eth0</td><td align="left">启用 ‘eth0’ 网络设备</td></tr><tr><td align="left">iwconfig eth1</td><td align="left">显示一个无线网卡的配置</td></tr><tr><td align="left">iwlist scan</td><td align="left">显示无线网络</td></tr><tr><td align="left">ip addr show</td><td align="left">显示网卡的IP地址</td></tr></tbody></table><h3 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">su -</td><td align="left">切换到root权限（与su有区别）</td></tr><tr><td align="left">shutdown -h now</td><td align="left">关机</td></tr><tr><td align="left">shutdown -r now</td><td align="left">重启</td></tr><tr><td align="left">top</td><td align="left">罗列使用CPU资源最多的linux任务 （输入q退出）</td></tr><tr><td align="left">pstree</td><td align="left">以树状图显示程序</td></tr><tr><td align="left">man ping</td><td align="left">查看参考手册（例如ping 命令）</td></tr><tr><td align="left">passwd</td><td align="left">修改密码</td></tr><tr><td align="left">df -h</td><td align="left">显示磁盘的使用情况</td></tr><tr><td align="left">cal -3</td><td align="left">显示前一个月，当前月以及下一个月的月历</td></tr><tr><td align="left">cal 10 1988</td><td align="left">显示指定月，年的月历</td></tr><tr><td align="left">date –date ‘1970-01-01 UTC 1427888888 seconds’</td><td align="left">把一相对于1970-01-01 00:00的秒数转换成时间</td></tr></tbody></table><h2 id="XSheel-5相关操作"><a href="#XSheel-5相关操作" class="headerlink" title="XSheel 5相关操作"></a>XSheel 5相关操作</h2><h3 id="窗体快捷键"><a href="#窗体快捷键" class="headerlink" title="窗体快捷键"></a>窗体快捷键</h3><table><thead><tr><th align="left">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="left">Ctrl + u</td><td align="left">删除光标之前到行首的字符</td></tr><tr><td align="left">Ctrl + k</td><td align="left">删除光标之前到行尾的字符</td></tr><tr><td align="left">Ctrl + c</td><td align="left">取消当前行输入的命令，相当于Ctrl + Break</td></tr><tr><td align="left">Ctrl + a</td><td align="left">光标移动到行首（ahead of line），相当于通常的Home键</td></tr><tr><td align="left">Ctrl + e</td><td align="left">光标移动到行尾（end of line）</td></tr><tr><td align="left">Ctrl + f</td><td align="left">光标向前（forward）移动一个字符位置</td></tr><tr><td align="left">Ctrl + b</td><td align="left">光标往回（backward）移动一个字符位置</td></tr><tr><td align="left">Ctrl + l</td><td align="left">清屏，相当于执行clear命令</td></tr><tr><td align="left">Ctrl + r</td><td align="left">显示:号提示，根据用户输入查找相关历史命令（reverse-i-search）</td></tr><tr><td align="left">Ctrl + w</td><td align="left">删除从光标位置前到当前所处单词（word）的开头</td></tr><tr><td align="left">Ctrl + t</td><td align="left">交换光标位置前的两个字符</td></tr><tr><td align="left">Ctrl + y</td><td align="left">粘贴最后一次被删除的单词</td></tr><tr><td align="left">Ctrl + Alt + d</td><td align="left">显示桌面</td></tr><tr><td align="left">Alt + b</td><td align="left">光标往回（backward）移动到前一个单词</td></tr><tr><td align="left">Alt + d</td><td align="left">删除从光标位置到当前所处单词的末尾</td></tr><tr><td align="left">Alt + F2</td><td align="left">运行</td></tr><tr><td align="left">Alt + F4</td><td align="left">关闭当前窗口</td></tr><tr><td align="left">Alt + F9</td><td align="left">最小化当前窗口</td></tr><tr><td align="left">Alt + F10</td><td align="left">最大化当前窗口</td></tr><tr><td align="left">Alt + Tab</td><td align="left">切换窗口</td></tr><tr><td align="left">Alt + 左键</td><td align="left">移动窗口（或在最下面的任务栏滚动鼠标滑轮）</td></tr></tbody></table><h2 id="SSH介绍"><a href="#SSH介绍" class="headerlink" title="SSH介绍"></a>SSH介绍</h2><p>SSH 为 [Secure Shell](<a href="https://baike.baidu.com/item/Secure" target="_blank" rel="noopener">https://baike.baidu.com/item/Secure</a> Shell) 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为<a href="https://baike.baidu.com/item/远程登录/1071998" target="_blank" rel="noopener">远程登录</a>会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括<a href="https://baike.baidu.com/item/HP-UX" target="_blank" rel="noopener">HP-UX</a>、<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>、<a href="https://baike.baidu.com/item/AIX" target="_blank" rel="noopener">AIX</a>、<a href="https://baike.baidu.com/item/Solaris/3517" target="_blank" rel="noopener">Solaris</a>、<a href="https://baike.baidu.com/item/Digital" target="_blank" rel="noopener">Digital</a> <a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a>、<a href="https://baike.baidu.com/item/Irix" target="_blank" rel="noopener">Irix</a>，以及其他平台，都可运行SSH。</p><h2 id="SSH用法"><a href="#SSH用法" class="headerlink" title="SSH用法"></a>SSH用法</h2><h3 id="检查是否开启ssh"><a href="#检查是否开启ssh" class="headerlink" title="检查是否开启ssh"></a>检查是否开启ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>rpm -qa | grep ssh</span><br></pre></td></tr></table></figure><h3 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>yum install openssh-server</span><br></pre></td></tr></table></figure><h3 id="开启ssh"><a href="#开启ssh" class="headerlink" title="开启ssh"></a>开启ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /bin/systemctl start sshd.service</span><br></pre></td></tr></table></figure><h3 id="继续检查是否开启"><a href="#继续检查是否开启" class="headerlink" title="继续检查是否开启"></a>继续检查是否开启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>ps -e | grep sshd</span><br></pre></td></tr></table></figure><h3 id="将ssh添加自启动"><a href="#将ssh添加自启动" class="headerlink" title="将ssh添加自启动"></a>将ssh添加自启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>systemctl enable sshd.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="centos" scheme="http://wysblogs.top/categories/centos/"/>
    
    
      <category term="centos" scheme="http://wysblogs.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos mysql配置</title>
    <link href="http://wysblogs.top/2019/12/11/Centos7-mysql%E9%85%8D%E7%BD%AE/"/>
    <id>http://wysblogs.top/2019/12/11/Centos7-mysql配置/</id>
    <published>2019-12-11T01:16:07.000Z</published>
    <updated>2019-12-12T17:27:28.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos-7-Mysql配置"><a href="#Centos-7-Mysql配置" class="headerlink" title="Centos 7 Mysql配置"></a>Centos 7 Mysql配置</h1><h2 id="Yum安装"><a href="#Yum安装" class="headerlink" title="Yum安装"></a>Yum安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line"><span class="meta">$</span>yum install mysql-server</span><br><span class="line"><span class="meta">#</span>启动</span><br><span class="line"><span class="meta">$</span>systemctl start mysqld </span><br><span class="line"><span class="meta">#</span>登录</span><br><span class="line"><span class="meta">$</span>mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>修改root密码</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">进入mysql系统表</span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"></span><br><span class="line">对用户进行排序</span><br><span class="line">desc user;</span><br><span class="line"></span><br><span class="line">修改root密码</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(“root”) <span class="keyword">where</span> <span class="keyword">user</span> = ‘root’;</span><br><span class="line"></span><br><span class="line">刷新权限</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line">赋予其他机器可以访问的权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> . <span class="keyword">to</span> root@’%’ <span class="keyword">identified</span> <span class="keyword">by</span> ‘root’ <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><p><strong>修改字符集</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>修改成这个样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p>重启mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>service mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在mysql中查看字符编码</span><br><span class="line">show variables like 'character_set%';</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="centos" scheme="http://wysblogs.top/categories/centos/"/>
    
    
      <category term="centos" scheme="http://wysblogs.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos7 防火墙优化</title>
    <link href="http://wysblogs.top/2019/12/11/Centos7-%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://wysblogs.top/2019/12/11/Centos7-防火墙/</id>
    <published>2019-12-11T01:14:40.000Z</published>
    <updated>2019-12-12T17:20:49.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos-7-防火墙优化"><a href="#Centos-7-防火墙优化" class="headerlink" title="Centos 7 防火墙优化"></a>Centos 7 防火墙优化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Centos 7 使用的防火墙是 firewall，可以允许哪些服务可用，哪些端口可用</p><h2 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>systemctl enable firewalld.service #启用 "开机启动"</span><br><span class="line"><span class="meta">$</span>systemctl disable firewalld.service #关闭 "开机启动"</span><br><span class="line"><span class="meta">$</span>systemctl start firewalld.service #启用防火墙</span><br><span class="line"><span class="meta">$</span>systemctl stop firewalld.service #关闭防火墙</span><br><span class="line"><span class="meta">$</span>systemctl status firewalld.service #查看防火墙状态</span><br><span class="line"></span><br><span class="line">【开机自启】</span><br><span class="line"><span class="meta">$</span>chkconfig firewalld on #"开机自启" 开启</span><br><span class="line"><span class="meta">$</span>chkconfig firewalld off  #"开机自启" 关闭</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口其实就是 类似于门的东西，你只能通过这扇门来访问我的服务器，</p><p>因此对于服务器安全来说，这扇门还是很重要的。</p><p><strong>开放端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>firewall-cmd --zone=public --add-port=&#123;端口&#125;/tcp --permanent #开放端口</span><br><span class="line"><span class="meta">#</span>开放端口之后必须重新启动防火墙才可以生效</span><br><span class="line"><span class="meta">$</span>systemctl restart firewalld.service #重启防火墙</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> --zone 作用域</span><br><span class="line"><span class="meta">#</span> --add-port=&#123;端口&#125;/tcp 添加端口</span><br><span class="line"><span class="meta">#</span> --permanent 永久生效，没有这个重启之后就会失效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看开启端口</span><br><span class="line"><span class="meta">$</span>firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><strong>关闭端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>修改22端口</strong></p><p>1、打开 /etc/ssh/sshd_config文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>2、将#Port 22 注释去掉，22改为你想设置的端口，如33881，保存</p><p>3、重启ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>4)将该端口加入防火墙例外并重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>firewall-cmd --permanent --zone=public --add-port=33881/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p><strong>密码长度与有效期</strong></p><p>默认配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>cat /etc/login.defs |grep PASS_ |grep -v '#'</span><br><span class="line"></span><br><span class="line">PASS_MAX_DAYS    99999</span><br><span class="line">PASS_MIN_DAYS    0</span><br><span class="line">PASS_MIN_LEN    5</span><br><span class="line">PASS_WARN_AGE    7</span><br></pre></td></tr></table></figure><p>加固方案:</p><p>1.备份配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cp -a /etc/login.defs /etc/login.defs.default</span><br></pre></td></tr></table></figure><p>2.编辑配置文件并将相关参数改成如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>vi /etc/login.defs</span><br><span class="line">PASS_MAX_DAYS 90</span><br><span class="line">PASS_MIN_DAYS 6</span><br><span class="line">PASS_MIN_LEN 8</span><br><span class="line">PASS_WARN_AGE 30</span><br></pre></td></tr></table></figure><p>备注:</p><p>/etc/login.defs文件的pass_min_len 参数并不具备强制性，测试仍然可以设置7位密码。最终需要cracklib来实现。</p><p>参数说明：</p><p>PASS_MAX_DAYS 密码有效期</p><p>PASS_MIN_DAYS 修改密码的最短期限</p><p>PASS_MIN_LEN 密码最短长度</p><p>PASS_WARN_AGE 密码过期提醒</p><p><strong>禁止root通过ssh远程登录</strong></p><p>默认配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>cat /etc/ssh/sshd_config |grep PermitRootLogin</span><br><span class="line"><span class="meta">#</span>PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>加固方案:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.备份配置文件</span><br><span class="line"><span class="meta">$</span>cp -a /etc/ssh/sshd_config /etc/ssh/sshd_config.default</span><br><span class="line">2.编辑配置文件</span><br><span class="line"><span class="meta">$</span>vi /etc/ssh/sshd_config</span><br><span class="line">将配置参数#PermitRootLogin yes改成PermitRootLogin no</span><br><span class="line">3.保存配置文件</span><br><span class="line">4.重启ssh服务</span><br><span class="line"><span class="meta">$</span> /etc/init.d/sshd restart</span><br></pre></td></tr></table></figure><p><strong>SSH 配置参数增强</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.备份配置文件</span><br><span class="line">2.编辑配置文件</span><br><span class="line"><span class="meta">$</span>vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">（1）禁止空密码登录</span><br><span class="line">将#PermitEmptyPasswords no参数的注释符号去掉，改成</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line"></span><br><span class="line">（2）关闭ssh的tcp转发</span><br><span class="line">将#AllowTcpForwarding yes参数改成</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line"></span><br><span class="line">（3）关闭S/KEY（质疑-应答)认证方式</span><br><span class="line">将#ChallengeResponseAuthentication yes参数，改成</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（4）关闭基于GSSAPI 的用户认证</span><br><span class="line">将GSSAPIAuthentication yes参数，改成</span><br><span class="line">GSSAPIAuthentication no</span><br><span class="line"></span><br><span class="line">3.保存配置文件</span><br><span class="line">4.重启ssh服务</span><br></pre></td></tr></table></figure><p><strong>隐藏系统版本信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行以下命令：</span><br><span class="line"><span class="meta">$</span>mv /etc/issue /etc/issue.bak</span><br><span class="line"><span class="meta">$</span>mv /etc/issue.net /etc/issue.net.bak</span><br></pre></td></tr></table></figure><p>备注:登录界面显示系统版本信息</p><p><strong>系统参数调优</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">1.备份配置文件</span><br><span class="line">cp -a /etc/sysctl.conf /etc/sysctl.conf.default</span><br><span class="line">2.添加以下调优参数到该文件中</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.ipv4.route.gc_timeout = 20</span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_wmem = 8192 131072 16777216</span><br><span class="line">net.ipv4.tcp_rmem = 32768 131072 16777216</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.core.somaxconn = 262144</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.ipv4.route.gc_timeout = 20</span><br><span class="line">net.ipv4.ip_local_port_range = 10024  65535</span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line">net.ipv4.tcp_syn_retries = 2</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1800</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_wmem = 8192 131072 16777216</span><br><span class="line">net.ipv4.tcp_rmem = 32768 131072 16777216</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line"></span><br><span class="line">fs.file-max = 65535</span><br><span class="line">kernel.pid_max = 65536</span><br><span class="line">net.ipv4.tcp_wmem = 4096 87380 8388608</span><br><span class="line">net.core.wmem_max = 8388608</span><br><span class="line">net.core.netdev_max_backlog = 5000</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 10240</span><br><span class="line"></span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 262144</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_time = 120</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 36000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="centos" scheme="http://wysblogs.top/categories/centos/"/>
    
    
      <category term="centos" scheme="http://wysblogs.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="http://wysblogs.top/2019/11/21/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://wysblogs.top/2019/11/21/Mybatis逆向工程/</id>
    <published>2019-11-21T13:32:57.000Z</published>
    <updated>2019-11-21T13:36:02.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mybatis逆向工程"><a href="#Mybatis逆向工程" class="headerlink" title="Mybatis逆向工程"></a>Mybatis逆向工程</h2><h2 id="pom-xml插件"><a href="#pom-xml插件" class="headerlink" title="pom.xml插件"></a>pom.xml插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"Mybatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 避免生成重复代码的插件 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   &lt;plugin type="com.vi.tmall.util.OverlsMergeablePlugin"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接地址账号密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/tmall_ssm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素的配置用来指定JDBC类型和Java类型如何转换。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否强制将DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage:生成实体类存放的包名,</span></span><br><span class="line"><span class="comment">        targetProject:指定目标项目路径，可以是绝对路径或相对路径（如 targetProject="src/main/java"）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.vi.tmall.pojo"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--enableSubPackages 如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String username)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimString"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成xml映射文件存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成mapper类存放位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.vi.tmall.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成对应表及类名,enable<span class="doctag">XXX:</span>XXX代表多种SQL方法，该属性用来指定是否生成对应的XXX语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"category"</span> <span class="attr">domainObjectName</span>=<span class="string">"Category"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"my.isgen.usekeys"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--useActualColumnNames:如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在Maven中运行generator插件就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://wysblogs.top/categories/Mybatis/"/>
    
    
      <category term="MyBatis" scheme="http://wysblogs.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式之面向对象设计模式</title>
    <link href="http://wysblogs.top/2019/11/18/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wysblogs.top/2019/11/18/JAVA设计模式之面向对象设计模式/</id>
    <published>2019-11-18T13:20:33.000Z</published>
    <updated>2019-11-18T15:06:56.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java设计模式之面向对象设计模式"><a href="#java设计模式之面向对象设计模式" class="headerlink" title="java设计模式之面向对象设计模式"></a>java设计模式之面向对象设计模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>软件的<strong>可维护性</strong>和<strong>可复用性</strong>是两个非常重要的用于衡量软件质量的属性</p><p>面向对象设计，一方面需要实现<strong>设计方案或者源代码的复用</strong>，另一方面要<strong>确保系统能够易于扩展和修改</strong>，具有良好的可维护性。</p><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中。</p><h3 id="另一种定义方式"><a href="#另一种定义方式" class="headerlink" title="另一种定义方式"></a>另一种定义方式</h3><p>就一个类而言，应该仅有一个引起它变化的原因。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被服用的可能性就越小，而且一个类承担的职责过多，相当于将这些指责耦合在一起，当一个职责变化的时候就可能引起其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将他们封装在同一个类中。</p><p><strong>单一职责原则是实现高内聚、低耦合的指导方针</strong></p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则是面向对象的可复用设计的第一块基石，他是最重要的面向对象设计原则。</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>软件实体应当对扩展开放，对修改关闭。</p><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><p>在开闭原则的定义中，软件实体可以指一个软件模块，一个由多个类组成的局部结构或一个独立的类。开闭原则就是指软件实体应尽量在不修改原有代码的情况下进行扩展。</p><p>如果一个软件设计符合开闭原则，那么可以非常方便的对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有<strong>适应性</strong>和<strong>灵活性</strong>的同时具备较好的<strong>稳定性</strong>和<strong>延续性</strong>。随着软件规模越来越大，软件寿命越来越长，软件维护成本越来越高，设计满足开闭原则的软件系统也变得越来越重要。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>为了满足开闭原则。，需要对系统进行抽象化设计，抽象化是开闭原则的关键。编程时，可以为系统定义一个<strong>相对稳定的抽象层</strong>，而将不同的实现行为移至具体的实现层中完成。</p><p>在后面的24种设计模式中很多设计模式都符合开闭原则，在对每一个模式进行优缺点评价时，都会将开闭原则作为一个重要的评价依据，以判断基于该模式设计的系统是否具备良好的灵活性和可拓展性。</p><h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>所有引用基类的地方必须能透明地使用其子类的对象。</p><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h3><p>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象，那么它不一定能够使用基类对象。<strong>例如我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此判断我喜欢所有的动物。</strong></p><p>里氏代换原则是实现开闭原则的重要方式之一，由于在使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p><p>在运用里氏代换原则时应该<strong>将父类设计为抽象类或者接口</strong>，让子类继承父类或者实现父接口，并实现在父类中声明的方法，在运行时子类实例替换父类实例，可以很方便地扩展系统的功能，无需修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。</p><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h3><p>依赖倒转原则要求<strong>针对接口编程，不需要针对实现编程</strong>。</p><p>依赖倒转原则要求在程序代码中<strong>传递参数时或者在关联关系中尽量引用层次高的抽象层类</strong>，<strong>即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情</strong>。为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。</p><p>在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中，这样如果系统行为发生变化，只需要对抽象层进行扩展，并修改配置文件，而无需修改原有系统的源代码，在不修改的情况下来扩展系统的功能，满足开闭原则的要求。</p><p>在实现依赖倒转原则时需要<strong>针对抽象层编程</strong>，而将具体类的对象通过依赖注入的方式注入到其他对象中，<strong>依赖注入是指当一个对象要与其他对象发生依赖关系时采用抽象的形式注入所依赖的对象</strong>。</p><p>常用的三种注入方式： <strong>构造注入，设值注入和接口注入</strong>。</p><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p><strong>开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段，他们相辅相成，相互补充，目标一致，只是分析问题时所站的角度不同而已。</strong></p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>客户端不应该依赖那些它不需要的接口。</p><h3 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h3><p>当一个接口太大时，<strong>需要把这个接口分割成一些更细小的接口</strong>，使用该接口的客户端仅需知道与之相关的方法即可。</p><p>这里的“接口“往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的”接口“，有严格的定义和结构，例如 interface。</p><p>在使用接口隔离原则时需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中的接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便。</p><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>优先使用对象组合，而不是通过继承来达到复用的目的。</p><h3 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h3><p>合成复用原则就是<strong>在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象</strong>，使之成为新对象的一部分，新对象通过委派调用已有对象的方法达到复用功能的目的。</p><p>在复用的时候，<strong>尽量使用组合/聚合关系（关联关系），少用继承。</strong></p><p>在面向对象设计中可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或者通过继承，但是首先应该考虑使用组合/聚合,组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对于其他类造成的影响相对较少；其次才考虑继承，在使用继承时需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p><p><strong>继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，而且灵活性不够强，只能在有限的环境中使用。</strong></p><p><strong>组合/聚合可以将已有的对象纳入新对象中，使之成为新对象的一部分，相对继承关系而言，耦合性相对较低；</strong></p><p><strong>合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</strong></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>关联</strong></p><p>关联指的是两个分开的类通过对象或者实例建立地关系。关联可以是一对一，一对多，多对一，多对多等关系。</p><p>关联比较宽泛，组合是聚合地一个子集。组合-》聚合-》关联；</p><p><strong>聚合</strong></p><p>聚合是关联的一种特殊形式：主要体现在三个方面</p><ul><li>聚合代表了has-a的关系</li><li>并且是一种单向关系。单向的，比如说公寓里有学生，但是学生里面不能有公寓，这是一种天生的单向关系。</li><li>在聚合的关系中，两种实例是可以单独存在的，不会相互影响，一个实例的存在与否不会影响与之聚合的实例的存在与否。</li></ul><p><strong>组合</strong></p><p>组合是一种聚合的限制形式，其中两个实体高度相互依赖，也就是说，两个类高度耦合。有以下特征：</p><ul><li><p>代表着一种part-of关系，就是一个类是另一个类的一部分</p></li><li><p>在组合的关系中，实例是彼此依赖的</p></li><li><p>当两个实例是组合关系，他们就是高度耦合的，一个对象必须依赖另一个对象的存在而存在</p><p>比如图书馆中会有很多相同或者不同主题的图书，但是如果图书馆被销毁后，对应的图书也就没了，图书不能独立与图书馆而存在，这就是组合关系。</p></li></ul><p><strong>聚合和组合相比较</strong></p><ul><li>依赖：聚合代表被关联的一方可以独立于关联一方而存在的关系，比如说，银行和雇员，将银行删除后，雇员仍然存在；然后，组合代表着被关联的一方不能独立与另一方而存在的关系，比如，人没有心脏就不能生存，心脏没有人也就没有了心脏。</li><li>关系类型：聚合是has-a关系，组合是part-of关系。</li><li>关联类型：组合是一种强关联关系，聚合是一种弱关联关系</li></ul><h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>每一个软件单位对其他单位都只有最少的只是，而且局限于那些与本单位密切相关的软件单位。</p><h3 id="解释-6"><a href="#解释-6" class="headerlink" title="解释"></a>解释</h3><p>迪米特法则要求一个软件实体应当尽可能少地与其他实体发生相互作用。</p><p>如果一个系统符合迪米特法则，那么当其中的某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则则要求限制软件实体之间通信的宽度和深度。</p><p>应用迪米特法则可以降低系统的耦合度，使类与类之间保持松散的耦合关系。</p><p><strong>定义形式</strong>：</p><ul><li>不要和 “陌生人” 说话</li><li>只与你的朋友直接通信</li></ul><p><strong>朋友的类别</strong>：</p><ul><li>当前对象本身（this）</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ul><p>任意一个对象如果满足上面的条件之一，就是当前对象的 ”朋友“ ，否则就是 “陌生人” 。</p><p>在应用迪米特法则的时候，一个对象只能与直接朋友发生交互，不要与 “陌生人” 直接交互，这样可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。如果一个对象需要调用另一个对象的方法，可以通过 “第三者” 转发这个调用。简单说就是引用一个 “第三者” 来降低现有对象之间的耦合度。</p><p><strong>注意</strong>：</p><ul><li>类的划分上尽量创建松耦合类，类之间的耦合度越低，就越有利于复用，如果修改了一个类，不会对关联的类造成太大的影响。</li><li>类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；</li><li>类的设计上，只要有可能，一个类型应该设计成不变类，在对其它类的引用上，一个对象对其他对象的引用应当降到最低。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>低耦合，高内聚，可维护，可复用，可扩展</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java设计模式" scheme="http://wysblogs.top/categories/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java设计模式" scheme="http://wysblogs.top/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Maven课上学习（三）</title>
    <link href="http://wysblogs.top/2019/11/13/Maven%E8%AF%BE%E4%B8%8A%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://wysblogs.top/2019/11/13/Maven课上学习（三）/</id>
    <published>2019-11-13T07:35:09.000Z</published>
    <updated>2019-11-13T07:45:32.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven课上学习（三）"><a href="#Maven课上学习（三）" class="headerlink" title="Maven课上学习（三）"></a>Maven课上学习（三）</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。</p><h2 id="依赖传递范围设定"><a href="#依赖传递范围设定" class="headerlink" title="依赖传递范围设定"></a>依赖传递范围设定</h2><p><strong>score</strong>：作用域，控制依赖传递</p><ul><li>test<ul><li>仅适用于第一类jar包，其不会向下传递</li></ul></li><li>provided<ul><li>仅适用于第二类jar包，其不会向下传递</li></ul></li><li>runtime<ul><li>仅适用于第三类jar包，会向下传递</li></ul></li><li>compile<ul><li>默认值。适用于第四类jar包，会向下传递</li></ul></li><li>system<ul><li>&lt;systemPath&gt;${basedir}/lib/xxx.jar&lt;/systemPath&gt;</li></ul></li><li>import<ul><li>下节课会说</li></ul></li></ul><p><strong>jar包分类</strong>：</p><ul><li>编译、运行、打包时都不需要<ul><li>测试用jar包属于该类型，例如junit、spring-test</li></ul></li><li>编译、运行时需要的jar，打包时不需要<ul><li>servlet-api，jsp-api属于该类型</li></ul></li><li>编译时不需要，但运行、打包时需要的jar包<ul><li>mysql驱动属于该类型</li><li>Class.forName(“com.mysql.jdbc.Driver”);</li></ul></li><li>编译、运行、打包时均需要的jar包</li></ul><h2 id="可选传递"><a href="#可选传递" class="headerlink" title="可选传递"></a>可选传递</h2><p><strong>optional</strong>（可选的）</p><ul><li>true，表示当前依赖是可选的，即可要可不要</li><li>false，默认值，表示默认是传递的</li></ul><p><strong>exclusions</strong>：</p><ul><li><strong>exclusion</strong>：排除依赖，将所选的依赖排除</li></ul><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><h3 id="直接依赖冲突"><a href="#直接依赖冲突" class="headerlink" title="直接依赖冲突"></a>直接依赖冲突</h3><p>在同一个工程中出现了同一个依赖的不同版本，系统会自动选择最后导入的那个版本</p><h3 id="间接依赖冲突"><a href="#间接依赖冲突" class="headerlink" title="间接依赖冲突"></a>间接依赖冲突</h3><p>间接依赖冲突在工程中会出问题，所以需要手工删除发生冲突的依赖</p><p>上级的包传递到下级，下级版本与上级不一致</p><h2 id="版本号的统一与管理"><a href="#版本号的统一与管理" class="headerlink" title="版本号的统一与管理"></a>版本号的统一与管理</h2><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E7%BB%9F%E4%B8%80%E4%B8%8E%E7%AE%A1%E7%90%86.png" alt="1573630065293"></p><h2 id="依赖的继承"><a href="#依赖的继承" class="headerlink" title="依赖的继承"></a>依赖的继承</h2><h3 id="直接继承"><a href="#直接继承" class="headerlink" title="直接继承"></a>直接继承</h3><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%9B%B4%E6%8E%A5%E7%BB%A7%E6%89%BF1.png" alt="1573630116259"></p><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%9B%B4%E6%8E%A5%E7%BB%A7%E6%89%BF2.png" alt="1573630133544"></p><h3 id="可选继承"><a href="#可选继承" class="headerlink" title="可选继承"></a>可选继承</h3><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1573630264399.png" alt="1573630264399"></p><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1573630271787.png" alt="1573630271787"></p><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1573630280300.png" alt="1573630280300"></p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><img src="/upload/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1573630289145.png" alt="1573630289145"></p><h2 id="课外"><a href="#课外" class="headerlink" title="课外"></a>课外</h2><p>开源中国—-&gt;国产开源</p><p>开源项目管理软件—-&gt;易软天创（禅道）</p><p>无反射无框架，无代理无框架</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Maven学习" scheme="http://wysblogs.top/categories/Maven%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Maven学习" scheme="http://wysblogs.top/tags/Maven%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习中遇到的问题（一）</title>
    <link href="http://wysblogs.top/2019/11/13/%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://wysblogs.top/2019/11/13/学习中遇到的问题（一）/</id>
    <published>2019-11-13T06:46:57.000Z</published>
    <updated>2019-11-13T07:23:48.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习中遇到的问题（一）"><a href="#学习中遇到的问题（一）" class="headerlink" title="学习中遇到的问题（一）"></a>学习中遇到的问题（一）</h1><p>1、<strong>集合类型只能通过XML来实现</strong></p><p>2、<strong>setting注入复杂类型数据</strong></p><p><strong>list</strong>:</p><ul><li>array value</li><li>list value</li><li>set value</li></ul><p><strong>map</strong>:</p><ul><li>properties prop</li><li>map entry key value</li></ul><p>3、<strong>为什么IOC容器中获得bean的时候要把bean转化为接口类型？</strong></p><p>因为new对象的时候也是用接口实例化子类，而在spring-config.xml中已经实例化子类，所以把子类转化为接口类型，实现了多态。</p><p>4、<strong>javaBean使用包装类</strong></p><p>Integer，String，Float等，因为如果值为空 不会显示0 可以显示null</p><p>5、<strong>线程绑定事务方法</strong></p><p><strong><a href="https://baike.baidu.com/item/ThreadLocal/4915311?fr=aladdin" target="_blank" rel="noopener">TheadLocal</a></strong></p><p>ThreadLocal而是一个线程内部的存储类，可以在指定线程内存储数据，数据存储以后，只有指定线程可以得到存储数据</p><p><strong><a href="https://blog.csdn.net/qq_38789789/article/details/100574738" target="_blank" rel="noopener">数据库事务控制</a></strong></p><p>6、<strong>分页</strong></p><p>可以使用分页框架实现</p><p><strong><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">pagehelper</a></strong></p><p>7、<strong>引入css样式后面一定要写上 rel=”stylesheet”</strong></p><p>8、<strong>ResponseBody</strong></p><p>@ResponseBody是作用在方法上的，表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用（也就是ajax），在使用@RequestMapping后，返回值通常解析为跳转路径，但是加上@ReponseBody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body 中，比如异步获取json数据，加上@ResponseBody后，会直接返回json数据。@RequestBody将HTTP请求正文插入方法中，使用适合的HttpMessageConverter将请求体写入某个对象。</p><p>9、 <strong>Mapper作用</strong></p><ul><li>为了把mapper这个DAO交給Spring管理</li><li>为了不再写mapper映射文件</li><li>为了给mapper接口 自动根据一个添加@Mapper注解的接口生成一个实现类</li></ul><p>10、<strong>三层架构</strong></p><p><strong>三层架构：表现层，业务层，持久层</strong></p><ul><li><strong>持久层</strong>：采用DAO模式，建立实体类和数据库表映射（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是为了完成对象数据和关系数据的转换。</li><li><strong>业务层</strong>：采用事务脚本模式。将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证同时成功或同时失败。避免部分成功部分失败引起的数据混乱操作。</li><li><strong>表现层</strong>：采用MVC模式。<ul><li>M称为模型，也就是实体类，用于数据的封装和数据的传输。</li><li>V称为视图，也就是GUI组件，用于数据的展示。</li><li>C称为控制，也就是事件，用于流程的控制。</li></ul></li><li><strong>设计原则</strong><ul><li>业务层接口的设计原则：一个实体类一个接口，一次提交一个事务方法。业务方法的参数来自表现层。</li><li>持久层接口的设计原则：一个实体类一个接口，一次数据库操作一个持久方法。</li></ul></li></ul><p>11、<strong>favicon报错</strong></p><p>在head标签中最下面写上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"#"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>12、<strong>centos防火墙端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>查看防火墙所有开放端口</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>开启端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta">#</span>命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent   #永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>关闭端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看防火墙状态</span><br><span class="line">firewall-cmd --state</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span>重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://wysblogs.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://wysblogs.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf</title>
    <link href="http://wysblogs.top/2019/10/31/thymeleaf/"/>
    <id>http://wysblogs.top/2019/10/31/thymeleaf/</id>
    <published>2019-10-31T10:51:38.000Z</published>
    <updated>2019-10-31T10:53:20.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Thymeleaf是用于Web和独立环境的现代服务器端Java模板引擎。</p><p>Thymeleaf的主要目标是将优雅的自然模板带到您的开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。Thymeleaf能够处理HTML，XML，JavaScript，CSS甚至纯文本。</p><p>Thymeleaf的主要目标是提供一个优雅和高度可维护的创建模板的方式。 为了实现这一点，它建立在自然模板的概念之上，以不影响模板作为设计原型的方式将其逻辑注入到模板文件中。 这改善了设计沟通，弥合了前端设计和开发人员之间的理解偏差。</p><p>Thymeleaf也是从一开始就设计(特别是HTML5)允许创建完全验证的模板。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在头部引入xmls的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>主要的使用标签</strong></p><table><thead><tr><th align="left">语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">{home.welcome}</td><td align="left">使用国际化文本,国际化传参直接追加(value…)</td></tr><tr><td align="left">${user.name}</td><td align="left">使用会话属性</td></tr><tr><td align="left">@{}</td><td align="left"><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;all&quot;href=&quot;../../css/gtvg.css&quot; th:href=&quot;@{/css/gtvg.css}&quot; /&gt;</code></td></tr><tr><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">${} 中预存对象（表达式中基本对象）</td><td align="left"></td></tr><tr><td align="left">param</td><td align="left">获取请求参数，比如${param.name},<a href="http://localhost:8080/?name=jeff" target="_blank" rel="noopener">http://localhost:8080?name=jeff</a></td></tr><tr><td align="left">session</td><td align="left">获取 session 的属性</td></tr><tr><td align="left">application</td><td align="left">获取 application 的属性</td></tr><tr><td align="left">execInfo</td><td align="left">有两个属性 templateName和 now(是 java 的 Calendar 对象)</td></tr><tr><td align="left">ctx</td><td align="left"></td></tr><tr><td align="left">vars</td><td align="left"></td></tr><tr><td align="left">locale</td><td align="left"></td></tr><tr><td align="left">httpServletRequest</td><td align="left"></td></tr><tr><td align="left">httpSession</td><td align="left"></td></tr><tr><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">th扩展标签</td><td align="left"></td></tr><tr><td align="left">th:text</td><td align="left">普通字符串</td></tr><tr><td align="left">th:utext</td><td align="left">转义文本</td></tr><tr><td align="left">th:href</td><td align="left"></td></tr><tr><td align="left">th:attr</td><td align="left"><code>&lt;img src=&quot;../../images/gtvglogo.png&quot; th:attr=&quot;src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}&quot; /&gt;</code></td></tr><tr><td align="left">th:with</td><td align="left">定义常量</td></tr><tr><td align="left">th:attrappend</td><td align="left"></td></tr><tr><td align="left">th:classappend</td><td align="left"></td></tr><tr><td align="left">th:styleappend</td><td align="left"></td></tr></tbody></table><p><strong>其他th标签</strong></p><table><thead><tr><th>*</th><th>*</th><th>*</th></tr></thead><tbody><tr><td>th:abbr</td><td>th:accept</td><td>th:accept-charset</td></tr><tr><td>th:abbr</td><td>th:accept</td><td>th:accept-charset</td></tr><tr><td>th:accesskey</td><td>th:action</td><td>th:align</td></tr><tr><td>th:alt</td><td>th:archive</td><td>th:audio</td></tr><tr><td>th:autocomplete</td><td>th:axis</td><td>th:background</td></tr><tr><td>th:bgcolor</td><td>th:border</td><td>th:cellpadding</td></tr><tr><td>th:cellspacing</td><td>th:challenge</td><td>th:charset</td></tr><tr><td>th:cite</td><td>th:class</td><td>th:classid</td></tr><tr><td>th:codebase</td><td>th:codetype</td><td>th:cols</td></tr><tr><td>th:colspan</td><td>th:compact</td><td>th:content</td></tr><tr><td>th:contenteditable</td><td>th:contextmenu</td><td>th:data</td></tr><tr><td>th:datetime</td><td>th:dir</td><td>th:draggable</td></tr><tr><td>th:dropzone</td><td>th:enctype</td><td>th:for</td></tr><tr><td>th:form</td><td>th:formaction</td><td>th:formenctype</td></tr><tr><td>th:formmethod</td><td>th:formtarget</td><td>th:frame</td></tr><tr><td>th:frameborder</td><td>th:headers</td><td>th:height</td></tr><tr><td>th:high</td><td>th:href</td><td>th:hreflang</td></tr><tr><td>th:hspace</td><td>th:http-equiv</td><td>th:icon</td></tr><tr><td>th:id</td><td>th:keytype</td><td>th:kind</td></tr><tr><td>th:label</td><td>th:lang</td><td>th:list</td></tr><tr><td>th:longdesc</td><td>th:low</td><td>th:manifest</td></tr><tr><td>th:marginheight</td><td>th:marginwidth</td><td>th:max</td></tr><tr><td>th:maxlength</td><td>th:media</td><td>th:method</td></tr><tr><td>th:min</td><td>th:name</td><td>th:optimum</td></tr><tr><td>th:pattern</td><td>th:placeholder</td><td>th:poster</td></tr><tr><td>th:preload</td><td>th:radiogroup</td><td>th:rel</td></tr><tr><td>th:rev</td><td>th:rows</td><td>th:rowspan</td></tr><tr><td>th:rules</td><td>th:sandbox</td><td>th:scheme</td></tr><tr><td>th:scope</td><td>th:scrolling</td><td>th:size</td></tr><tr><td>th:sizes</td><td>th:span</td><td>th:spellcheck</td></tr><tr><td>th:src</td><td>th:srclang</td><td>th:standby</td></tr><tr><td>th:start</td><td>th:step</td><td>th:style</td></tr><tr><td>th:summary</td><td>th:tabindex</td><td>th:target</td></tr><tr><td>th:title</td><td>th:type</td><td>th:usemap</td></tr><tr><td>th:value</td><td>th:valuetype</td><td>th:vspace</td></tr><tr><td>th:width</td><td>th:wrap</td><td>th:xmlbase</td></tr><tr><td>th:xmllang</td><td>th:xmlspace</td><td>th:alt-title 或th:lang-xmllang（如果其中两个属性值相同）</td></tr></tbody></table><h2 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h2><p><strong>简单的语法</strong></p><ul><li><code>#{...}</code> ：Message 表达式</li><li><code>${}</code>：变量表达式</li><li><code>*{}</code> ：选择变量表达式</li><li><code>@{}</code>：链接 URL 表达式</li></ul><p><strong>变量</strong></p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>文本</td><td>‘one text’ , ‘Another one!’ ,…</td></tr><tr><td>数字</td><td>0 , 34 , 3.0 , 12.3 ,…</td></tr><tr><td>真假</td><td>true , false</td></tr><tr><td>文字符号</td><td>one , sometext , main ,…</td></tr></tbody></table><p><strong>字符连接</strong></p><table><thead><tr><th>分类</th><th>示例</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>+</td><td>‘The name is ‘+${name}</td><td></td><td></td><td></td></tr><tr><td></td><td>…</td><td></td><td></td><td>The name is ${name}</td></tr></tbody></table><p><strong>算数运算</strong></p><table><thead><tr><th>语法</th><th>示例</th></tr></thead><tbody><tr><td>+, -, *, /, %</td><td>二元运算符</td></tr><tr><td>-</td><td>减号（一元运算符）</td></tr></tbody></table><p><strong>真假运算</strong></p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>and , or</td><td>二元运算符</td></tr><tr><td>! , not</td><td>否定（一元运算符）</td></tr></tbody></table><p><strong>比较运算</strong></p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</td><td>比较</td></tr><tr><td>== , != ( eq , ne )</td><td>平等</td></tr></tbody></table><p> <strong>条件运算</strong></p><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>if-then</td><td>(if) ? (then)</td></tr><tr><td>if-then-else</td><td>(if) ? (then) : (else)</td></tr><tr><td>Default</td><td>(value) ?: (defaultvalue)</td></tr></tbody></table><p><strong>表达式中使用内置对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dates :</span></span><br><span class="line"></span><br><span class="line">utility methods <span class="keyword">for</span> java.util.Date objects: formatting, component extraction, etc. <span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#numbers :</span></span><br><span class="line">utility methods <span class="keyword">for</span> formatting numeric objects.</span><br><span class="line"></span><br><span class="line"><span class="comment">#strings : </span></span><br><span class="line">utility methods <span class="keyword">for</span> String objects: contains, startsWith, prepending/appending, etc. <span class="comment">#objects : utility methods for objects in general.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bools : </span></span><br><span class="line">utility methods <span class="keyword">for</span> boolean evaluation. <span class="comment">#arrays : utility methods for arrays.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lists :</span></span><br><span class="line">utility methods <span class="keyword">for</span> lists.</span><br><span class="line"></span><br><span class="line"><span class="comment">#sets : </span></span><br><span class="line">utility methods <span class="keyword">for</span> sets.</span><br><span class="line"></span><br><span class="line"><span class="comment">#maps : </span></span><br><span class="line">utility methods <span class="keyword">for</span> maps.</span><br><span class="line"></span><br><span class="line"><span class="comment">#aggregates : </span></span><br><span class="line">utility methods <span class="keyword">for</span> creating aggregates on arrays <span class="keyword">or</span> collections.</span><br><span class="line"></span><br><span class="line"><span class="comment">#messages : </span></span><br><span class="line">utility methods <span class="keyword">for</span> obtaining externalized messages inside variables expressions, <span class="keyword">in</span> the same way <span class="keyword">as</span> they would be obtained using <span class="comment">#&#123;...&#125; syntax.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ids : </span></span><br><span class="line">utility methods <span class="keyword">for</span> dealing <span class="keyword">with</span> id attributes that might be repeated (<span class="keyword">for</span> example, <span class="keyword">as</span> a result of an iteration).</span><br></pre></td></tr></table></figure><p><strong>预处理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__<span class="variable">$&#123;expression&#125;</span>__</span><br></pre></td></tr></table></figure><p><strong>循环</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">迭代器的状态</span><br><span class="line">index: 当前的索引，从0开始</span><br><span class="line">count: 当前的索引，从1开始</span><br><span class="line">size：总数</span><br><span class="line">current:</span><br><span class="line">even/odd:</span><br><span class="line">first</span><br><span class="line">last</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod,iterStat : $&#123;prods&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;iterStat.odd&#125;? 'odd'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>判断</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #lists.isEmpty(prod.comments)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">unless</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/comments(prodId=$&#123;prod.id&#125;)&#125;"</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;#lists.isEmpty(prod.comments)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">switch</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板布局</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">th:fragment</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line"></span><br><span class="line">templates/footer.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">            © 2011 The Good Thymes Virtual Grocery</span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">templates/index.html中使用</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"copy-section"</span>&gt;</span></span><br><span class="line">        © 2011 The Good Thymes Virtual Grocery </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: #copy-section"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">th:include 和 th:replace 区别</span><br><span class="line"></span><br><span class="line">th:include 加入代码</span><br><span class="line"></span><br><span class="line">th:replace 替换代码</span><br><span class="line"></span><br><span class="line">模板传参：参数传递顺序不强制</span><br><span class="line"></span><br><span class="line">    定义</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"frag (onevar,twovar)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;onevar&#125; + ' - ' + $&#123;twovar&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    使用</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"::frag ($&#123;value1&#125;,$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"::frag (onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">等价于 <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"::frag"</span> <span class="attr">th:with</span>=<span class="string">"onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;"</span>&gt;</span>）</span><br></pre></td></tr></table></figure><p><strong>移除标签 th:remove</strong></p><p>取值范围</p><ul><li>all：移除所有</li><li>body：不移除自己，但移除他的子标签</li><li>tag: 只移除自己，不移除他的子标签</li><li>all-but-first：移除所有内容除第一个外</li><li>none：啥都不做</li></ul><p><strong>执行顺序</strong></p><p><img src="/upload/thymeleaf/SouthEast.jpg" alt="这里写图片描述"></p><p><strong>thymeleaf注释语法</strong></p><ul><li>html 看不到，并且 thymeleaf 不会执行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/* This code will be removed at thymeleaf parsing time! */--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>and 未运行可以在 html 中看到，运行后就消失</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/*--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>you can see me only before thymeleaf processes me! <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--*/--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行后才会看到</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.login&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.address&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>推荐下面写法（编译前看不见）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.login&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.address&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*/ &lt;/th:block&gt; /*/--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>文本内联th:inline</strong></p><p>略</p><p><strong>验证模板的正确性</strong></p><p>略</p><p><strong>特殊用法展示</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#aggregates.sum(o.orderLines.&#123;purchasePrice * amount&#125;)&#125;"</span>&gt;</span>23.32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="thymeleaf" scheme="http://wysblogs.top/categories/thymeleaf/"/>
    
    
      <category term="thymeleaf" scheme="http://wysblogs.top/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://wysblogs.top/2019/10/30/Docker/"/>
    <id>http://wysblogs.top/2019/10/30/Docker/</id>
    <published>2019-10-30T13:09:21.000Z</published>
    <updated>2019-10-30T13:10:31.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；</p><p><strong>Docker</strong>支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li><strong>docker主机（Host）</strong>：安装了Docker程序的机器</li><li><strong>docker客户端（Client）</strong>：连接docker主机进行操作</li><li><strong>docker仓库（Registry）</strong>：用来保存各种打包好的软件镜像</li><li><strong>docker镜像（images）</strong>：软件打包好的镜像，放在docker仓库中</li><li><strong>docker容器（Container）</strong>：镜像启动后的一个实例称为一个容器</li></ul><p><strong>步骤</strong>：</p><p>1、安装Docker</p><p>2、去Docker仓库找到这个软件对应的镜像</p><p>3、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</p><p>4、对容器的启动停止就是对软件的启动停止</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、按y确认</span><br><span class="line">4、启动docker</span><br><span class="line"><span class="meta">#</span> systemctl start docker</span><br><span class="line"><span class="meta">#</span> docker -v</span><br><span class="line">5、开机启动docker</span><br><span class="line"><span class="meta">#</span> systemctl enable docker</span><br><span class="line">6、停止docker</span><br><span class="line"><span class="meta">#</span> sytemctl stop docker</span><br><span class="line">7、进入docker镜像</span><br><span class="line"><span class="meta">#</span> docker exec -it 容器id  这种方式进入容器，退回到前台时，容器还在运行</span><br><span class="line"><span class="meta">#</span> docker attach 容器id 这种方式进入容器，退出时，容器也跟着退出</span><br><span class="line">8、退出docker镜像</span><br><span class="line"><span class="meta">#</span> exit</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>软件镜像（类似于安装程序）—-运行镜像—-产生一个容器（正在运行的软件）</p><p><strong>步骤</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line"><span class="meta">#</span> docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line"><span class="meta">#</span> docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line"><span class="meta">#</span> docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、查看运行中的容器</span><br><span class="line"><span class="meta">#</span> docker ps</span><br><span class="line">5、停止运行中的容器</span><br><span class="line"><span class="meta">#</span> docker stop 容器id</span><br><span class="line">6、查看所有容器</span><br><span class="line"><span class="meta">#</span> docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line"><span class="meta">#</span> docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"><span class="meta">#</span> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p：将主机的端口映射到容器的一个端口   主机端口：容器内部的端口</span><br><span class="line">10、防火墙</span><br><span class="line"><span class="meta">#</span> service firewalld status 查看防火墙状态</span><br><span class="line"><span class="meta">#</span> service firewalld stop 关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line"><span class="meta">#</span> docker logs container -name/container -id</span><br><span class="line"></span><br><span class="line">更多命令可以上官网</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考文档</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>docker官方镜像网站</p><p> <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> </p><p><strong>安装mysql</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p><strong>使用mysql</strong></p><p>必选按照人家给的文档来指定参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mysql -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/my/custom文件夹挂载到 mysqldocker容器的/ect/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在/conf/mysql文件夹下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">指定mysql的一些参数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Docker" scheme="http://wysblogs.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://wysblogs.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（三）日志</title>
    <link href="http://wysblogs.top/2019/10/23/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89%E6%97%A5%E5%BF%97/"/>
    <id>http://wysblogs.top/2019/10/23/SpringBoot（三）日志/</id>
    <published>2019-10-23T14:12:46.000Z</published>
    <updated>2019-10-23T14:15:13.343Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Boot（三）日志"><a href="#Spring-Boot（三）日志" class="headerlink" title="Spring Boot（三）日志"></a>Spring Boot（三）日志</h1><h2 id="SpringBoot文档"><a href="#SpringBoot文档" class="headerlink" title="SpringBoot文档"></a><a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features" target="_blank" rel="noopener">SpringBoot文档</a></h2><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p><strong>小张：开发一个大型系统</strong>：</p><p>1、 System.out.println(“”);将关键数据打印在控制台；老板要去掉？</p><p>2、框架来记录系统的一些信息；日志框架；zhanglogging.jar；</p><p>3、高大上的几个功能？异步模式？自动归档？xxxx？zhanglogging-good.jar？</p><p>4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglooging-perfect.jar；</p><p>5、JDBC—数据库驱动；</p><p>写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>给项目中导入具体的日志实现就行了； 我们之前的日至框架都是实现的抽象层；</p><p><strong>市面上的日志框架</strong>：</p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j。。。。</p><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta Commons Logging）</del> SLF4j（Simple Logging Facade for java） <del>jboss-logging</del></td><td>LOg4j JUL(java.util.logging)   Log4j2 Logback</td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：SLF4j；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认使用的是JCL；</p><p><strong>SpringBoot选用SLF4j和logback；</strong></p><h2 id="SLF4j的使用"><a href="#SLF4j的使用" class="headerlink" title="SLF4j的使用"></a>SLF4j的使用</h2><h3 id="如何在系统中使用SLF4j"><a href="#如何在系统中使用SLF4j" class="headerlink" title="如何在系统中使用SLF4j"></a>如何在系统中使用SLF4j</h3><p>以后开发的时候，日志记录的方法调用，不应该直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>应该给系统里面导入slf4j的jar包和logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/upload/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/concrete-bindings.png" alt="imgage"></p><p>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，<strong>配置文件还是做成日志实现框架的配置文件</strong>；</p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>a（slf4j+logback）；Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出；</p><h3 id="如何让系统中所有日志都统一到slf4j"><a href="#如何让系统中所有日志都统一到slf4j" class="headerlink" title="如何让系统中所有日志都统一到slf4j"></a>如何让系统中所有日志都统一到slf4j</h3><p>1、 将系统中其他日志框架先排除出去</p><p>2、用中间包来替换原有的日志框架</p><p>3、我们导入slf4j其他的实现</p><h2 id="SpringBoot日志关系"><a href="#SpringBoot日志关系" class="headerlink" title="SpringBoot日志关系"></a>SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>1、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>2、SpringBoot也把其他的日志都替换成了slf4j</p><p>3、中间替换包？</p><p><img src="/upload/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571820691783.png" alt="1571820691783"></p><p>4、如果我们要引入其他框架？一定要把这个框架的默认日子和依赖移除掉？</p><p><strong>SpringBoot能自动适配所有日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架以来的日志框架排除掉；</strong></p><h2 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h2><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>SpringBoot帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志的级别</span></span><br><span class="line"><span class="comment">     * 由低到高</span></span><br><span class="line"><span class="comment">     * trace&lt;debug&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">     * 可以调整需要输出的日志级别；</span></span><br><span class="line"><span class="comment">     * 日志就只会在这个级别以后的高级别生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot默认给我们使用的是info级别的</span></span><br><span class="line"><span class="comment">     * 没有指定级别的就用SpringBoot默认规定级别，root级别 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">    logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">日志和输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名称，</span><br><span class="line">%-5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分隔</span><br><span class="line">%msg : 日志消息，</span><br><span class="line">%n 是换行符</span><br><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p>SpringBoot修改日志的默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.wys=trace</span><br><span class="line"></span><br><span class="line">#当前项目下生成springboot.log日志</span><br><span class="line">#支持绝对路径</span><br><span class="line">#可以指定完整的路径；</span><br><span class="line">#logging.file.name=springboot.log</span><br><span class="line"></span><br><span class="line">#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；</span><br><span class="line">#使用spring.log作为默认文件</span><br><span class="line">logging.file.path=/spring/log</span><br><span class="line"></span><br><span class="line">#在控制台输出的日志格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger - %msg%n</span><br><span class="line">#指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; === %msg%n</span><br></pre></td></tr></table></figure><h3 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a>指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用它默认的配置了；</p><table><thead><tr><th align="left">Logging System</th><th align="left">Customization</th></tr></thead><tbody><tr><td align="left">Logback</td><td align="left"><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td></tr><tr><td align="left">Log4j2</td><td align="left"><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td align="left">JDK (Java Util Logging)</td><td align="left"><code>logging.properties</code></td></tr></tbody></table><p><strong>logback.xml</strong> ：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，</p><p>由SpringBoot来解析日志配置，可以使用SpringBoot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以指定某段配置只在某个环境中生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>否则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no applicable action for [springProfile]</span><br></pre></td></tr></table></figure><h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j + log4j的方式：排除不相关的依赖，导入自己需要的依赖就行；</p><p>可以在官方文档中进行资料查找；</p><p>切换为log4j2：导入log4j2的启动器依赖即可；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Spring Boot学习笔记" scheme="http://wysblogs.top/categories/Spring-Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring Boot" scheme="http://wysblogs.top/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键大全</title>
    <link href="http://wysblogs.top/2019/10/23/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>http://wysblogs.top/2019/10/23/IDEA快捷键大全/</id>
    <published>2019-10-23T14:09:49.000Z</published>
    <updated>2019-10-23T14:11:37.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA快捷键大全"><a href="#IDEA快捷键大全" class="headerlink" title="IDEA快捷键大全"></a>IDEA快捷键大全</h1><p>Ctrl+Shift + Enter，语句完成</p><p>“！”，否定完成，输入表达式时按 “！”键</p><p>Ctrl+E，最近的文件</p><p>Ctrl+Shift+E，最近更改的文件</p><p>Shift+Click，可以关闭文件</p><p>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</p><p>Ctrl+F12，可以显示当前文件的结构</p><p>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</p><p>Ctrl+N，可以快速打开类</p><p>Ctrl+Shift+N，可以快速打开文件（查找文件）</p><p>Alt+Q，可以看到当前方法的声明</p><p>Ctrl+P，可以显示参数信息</p><p>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</p><p>Alt+Insert，可以生成构造器/Getter/Setter等</p><p>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义</p><p>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</p><p>Ctrl+Enter，导入包，自动修正</p><p>Ctrl+Alt+L，格式化代码</p><p>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</p><p>Ctrl+Alt+O，优化导入的类和包</p><p>Ctrl+R，替换文本</p><p>Ctrl+F，查找文本</p><p>Ctrl+Shift+Space，自动补全代码</p><p>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</p><p>Ctrl+Shift+Alt+N，查找类中的方法或变量</p><p>Alt+Shift+C，最近的更改</p><p>Alt+Shift+Up/Down，上/下移一行</p><p>Shift+F6，重构 – 重命名</p><p>Ctrl+X，删除行</p><p>Ctrl+D，复制行</p><p>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</p><p>Ctrl+J，自动代码（例如：serr）</p><p>Ctrl+Alt+J，用动态模板环绕</p><p>Ctrl+H，显示类结构图（类的继承层次）</p><p>Ctrl+Q，显示注释文档</p><p>Alt+F1，查找代码所在位置</p><p>Alt+1，快速打开或隐藏工程面板</p><p>Ctrl+Alt+left/right，返回至上次浏览的位置</p><p>Alt+left/right，切换代码视图</p><p>Alt+Up/Down，在方法间快速移动定位</p><p>Ctrl+Shift+Up/Down，向上/下移动语句</p><p>F2 或 Shift+F2，高亮错误或警告快速定位</p><p>Tab，代码标签输入完成后，按 Tab，生成代码</p><p>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</p><p>Alt+F3，逐个往下查找相同文本，并高亮显示</p><p>Ctrl+Up/Down，光标中转到第一行或最后一行下</p><p>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</p><p>Ctrl+Alt+B，跳转到方法实现处（查找接口实现类）</p><p>Ctrl+Shift+Backspace，跳转到上次编辑的地方</p><p>Ctrl+O，重写方法</p><p>Ctrl+Alt+Space，类名自动完成</p><p>Ctrl+Alt+Up/Down，快速跳转搜索结果</p><p>Ctrl+Shift+J，整合两行</p><p>Alt+F8，计算变量值</p><p>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</p><p>Ctrl+Alt+Shift+V，简单粘贴</p><p>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</p><p>F12，把焦点从编辑器移到最近使用的工具窗口</p><p>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</p><p>Ctrl+W，可以选择单词继而语句继而行继而函数</p><p>Ctrl+Shift+W，取消选择光标所在词</p><p>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</p><p>Ctrl+I，实现方法</p><p>Ctrl+Shift+U，大小写转化</p><p>Ctrl+Y，删除当前行</p><p>Shift+Enter，向下插入新行</p><p>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</p><p>Ctrl+Shift+F，全局查找</p><p>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</p><p>Ctrl+Shift+S，高级搜索</p><p>Ctrl+U，转到父类</p><p>Ctrl+Alt+S，打开设置对话框</p><p>Alt+Shift+Inert，开启/关闭列选择模式</p><p>Ctrl+Alt+Shift+S，打开当前项目/模块属性</p><p>Ctrl+G，定位行</p><p>Alt+Home，跳转到导航栏</p><p>Ctrl+Enter，上插一行</p><p>Ctrl+Backspace，按单词删除</p><p>Ctrl+”+/-”，当前方法展开、折叠</p><p>Ctrl+Shift+”+/-”，全部展开、折叠</p><p><strong>【调试部分、编译】</strong></p><p>Ctrl+F2，停止</p><p>Alt+Shift+F9，选择 Debug</p><p>Alt+Shift+F10，选择 Run</p><p>Ctrl+Shift+F9，编译</p><p>Ctrl+Shift+F10，运行</p><p>Ctrl+Shift+F8，查看断点</p><p>F8，步过</p><p>F7，步入</p><p>Shift+F7，智能步入</p><p>Shift+F8，步出</p><p>Alt+Shift+F8，强制步过</p><p>Alt+Shift+F7，强制步入</p><p>Alt+F9，运行至光标处</p><p>Ctrl+Alt+F9，强制运行至光标处</p><p>F9，恢复程序</p><p>Alt+F10，定位到断点</p><p>Ctrl+F8，切换行断点</p><p>Ctrl+F9，生成项目</p><p>Alt+1，项目</p><p>Alt+2，收藏</p><p>Alt+6，TODO</p><p>Alt+7，结构</p><p>Ctrl+Shift+C，复制路径</p><p>Ctrl+Alt+Shift+C，复制引用，必须选择类名</p><p>Ctrl+Alt+Y，同步</p><p>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</p><p>Shift+F12，还原默认布局</p><p>Ctrl+Shift+F12，隐藏/恢复所有窗口</p><p>Ctrl+F4，关闭</p><p>Ctrl+Shift+F4，关闭活动选项卡</p><p>Ctrl+Tab，转到下一个拆分器</p><p>Ctrl+Shift+Tab，转到上一个拆分器</p><p><strong>【重构】</strong></p><p>Ctrl+Alt+Shift+T，弹出重构菜单</p><p>Shift+F6，重命名</p><p>F6，移动</p><p>F5，复制</p><p>Alt+Delete，安全删除</p><p>Ctrl+Alt+N，内联</p><p><strong>【查找】</strong></p><p>Ctrl+F，查找</p><p>Ctrl+R，替换</p><p>F3，查找下一个</p><p>Shift+F3，查找上一个</p><p>Ctrl+Shift+F，在路径中查找</p><p>Ctrl+Shift+R，在路径中替换</p><p>Ctrl+Shift+S，搜索结构</p><p>Ctrl+Shift+M，替换结构</p><p>Alt+F7，查找用法</p><p>Ctrl+Alt+F7，显示用法</p><p>Ctrl+F7，在文件中查找用法</p><p>Ctrl+Shift+F7，在文件中高亮显示用法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="IDEA" scheme="http://wysblogs.top/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://wysblogs.top/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC常用注解</title>
    <link href="http://wysblogs.top/2019/10/20/Spring-MVC%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>http://wysblogs.top/2019/10/20/Spring-MVC常用注解/</id>
    <published>2019-10-20T13:10:48.000Z</published>
    <updated>2019-10-20T13:11:31.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-MVC-常用注解"><a href="#Spring-MVC-常用注解" class="headerlink" title="Spring MVC 常用注解"></a>Spring MVC 常用注解</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>这个注解表示当前类是一个控制器组件，并且把这个类装进Spring容器中；</p><p>在Spring MVC中，控制器Controller负责处理DispatcherServlet分发的请求，它把用户请求的数据经过业务处理层之后封装成一个Model，然后把该Model返回给对应的View进行展示；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p><strong>作用</strong></p><p>用于请求地址映射，可以作用于类和方法上；</p><p><strong>参数</strong></p><ul><li>value：定义request请求的映射地址；</li><li>method：定义request请求的方式；包括（GET，POST，OPTIONS，PUT，PATCH，DELETE，TRACE）默认接受的是GET请求，如果请求方式和定义方式不一致，那么就会请求不到指定映射地址。</li><li>params：定义request请求中必须包含的参数；</li><li>headers：定义request请求中必须包含某些指定的请求头；如：@RequestMapping(value=”/test”,headers=”content-type=text/*”)说明请求中必须包含“text/html”等类型的Content-type头，才是一个匹配的请求；</li><li>consumes：定义请求提交内容的类型；</li><li>produces：指定返回的内容类型，仅当request请求头中的（Accept）类型中包含该指定类型从才返回；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world quick!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p><strong>作用</strong></p><p>用于获取传入参数的值</p><p><strong>参数</strong></p><ul><li>value：参数的名称</li><li>required：定义该传入参数是否必须，默认为true，（和RequestMapping的params属性有点类似）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(name = <span class="string">"myname"</span>)</span> String name) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PathViriable"><a href="#PathViriable" class="headerlink" title="@PathViriable"></a>@PathViriable</h2><p><strong>作用</strong></p><p>用于定义路径参数值</p><p><strong>参数</strong></p><ul><li>value：参数的名称</li><li>required：定义传入参数是否为必须值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello/&#123;myname&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable(name=<span class="string">"myname"</span>)</span> String name) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p><strong>作用</strong></p><p>作用于方法上，可以将整个返回结果以某种格式返回，如json或者xml等</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p><strong>作用</strong></p><p>用于获取请求的Cookie值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>,defaultValue = <span class="string">""</span>)</span> String cookie) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><p><strong>作用</strong></p><p>用于把参数保存到model中，可以注解方法或者参数，注解在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在session中，</p><p>这个注解在使用的时候，如果没有指定名称，就默认按照返回类型的类名称（首字母小写）作为属性名称；</p><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p><strong>作用</strong></p><p>默认情况下，Spring MVC将模型中的数据存储在request域中。当一个请求结束的时候，数据就失效了，如果想要跨页面使用，就需要用的session。而SessionAttributes注解就可以使模型中数据存储一份到session中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Spring MVC" scheme="http://wysblogs.top/categories/Spring-MVC/"/>
    
    
      <category term="Spring MVC" scheme="http://wysblogs.top/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（二）配置</title>
    <link href="http://wysblogs.top/2019/10/20/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89%E9%85%8D%E7%BD%AE/"/>
    <id>http://wysblogs.top/2019/10/20/SpringBoot（二）配置/</id>
    <published>2019-10-20T13:09:28.000Z</published>
    <updated>2019-10-20T13:10:29.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringBoot（二）配置"><a href="#SpringBoot（二）配置" class="headerlink" title="SpringBoot（二）配置"></a>SpringBoot（二）配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名称是固定的；</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好了；</p><p>YAML （YAML Ain’t Markup Language）</p><ul><li>YAML A Markup Language：是一个标记语言</li><li>YAML isn’t Markup Language：不是一个标记语言</li></ul><p>标记语言：</p><ul><li>以前的配置文件：大多数都使用的是<strong>XXXX.xml</strong>文件；</li><li>YAML：<strong>以数据为中心</strong>，比json，xml更适合做配置文件；</li><li>YAML：语法配置例子</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><ul><li>XML：配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>key:(空格)value ： 表示一对键值对；</li><li>以<strong>空格</strong>的缩进来控制层级关系；</li><li>只要是左对齐的一列数据，都是同一个层级的</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><ul><li>属性和值也是大小写敏感的；</li></ul><h3 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h3><p><strong>字面量：普通的值（数字，字符串，布尔）</strong>：</p><ul><li>key: Value ：字面直接来写；</li><li>字符串默认不用加上单引号或者双引号；</li><li>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<ul><li>name: “zhangsan\n lisi”：输出：zhangsan 换行 lisi</li></ul></li><li>‘’: 单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据<ul><li>name: “zhangsan\n lisi”：输出：zhangsan\n lisi</li></ul></li></ul><p><strong>对象、Map（属性和值）（键值对）</strong>：</p><p>key: value : 在下一行来写对象的属性和值的关系；注意缩进</p><p>对象还是 key: value的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数组（List、Set）</strong>：</p><p>用 - 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">&#123;cat,dog,pig&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件值注入："><a href="#配置文件值注入：" class="headerlink" title="配置文件值注入："></a><strong>配置文件值注入</strong>：</h2><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2019</span><span class="string">/10/10</span></span><br><span class="line"><span class="attr">  maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">  lists:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>JavaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wys.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * ConfigurationProperties：告诉SpringBoot将本类中所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    导入配置文件处理器，配置文件进行绑定就会有提示</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>idea中默认使用的是utf-8编码，所以需要去设置中，将 File Encodings 中的编码类型全都改成utf-8，并且将最下面的把utf-8编码转换成ascill码给勾上去。</p><p><strong>@Value获取值和@ConfigurationProperties获取值比较</strong></p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value;</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><p>属性松散绑定<br>表示驼峰式、下划线(_)、短横线(-)</p><p>标准方式<br>person.firstName</p><p>方式一<br>大写用-<br>person.first-name</p><p>方式二<br>大写用_<br>person.first_name</p><p>三种方式，都可以使用<br>推荐，属性书写方式<br>PERSON_FIRST_NAME</p><h3 id="PropertySource-amp-ImportResource"><a href="#PropertySource-amp-ImportResource" class="headerlink" title="@PropertySource&amp;@ImportResource"></a>@PropertySource&amp;@ImportResource</h3><p><strong>@PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value=&#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="张三/$&#123;key&#125; 从环境变量、配置文件获取值/#&#123;spEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="comment">//lastName必须是邮箱类型</span></span><br><span class="line">    <span class="comment">//@Email</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("false")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring配置文件生效，加载进来；<strong>@ImportResource</strong>标注在配置类上；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(value = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.wys.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot 推荐给容器中添加组件的方式：推荐使用全注解的方式；</p><ul><li>配置类 ==== Spring配置文件</li><li>使用@Bean给容器中添加组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法的返回值添加到容器中，容器中这个组件默认id就是方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加组件了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><p><strong>随机数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;</span><br><span class="line">$&#123;random.int(10)&#125;、$&#123;random.int&#123;1024,65536&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>占位符获取之前配置的，如果没有可以使用:指定默认值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=李四$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2019/10/10</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v2</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure><h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p><strong>概念</strong></p><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><p><strong>多Profile文件</strong></p><p>我们在主配置文件编写的时候，文件名可以是 application-(profile).properties/yml</p><p>默认使用application.properties配置；</p><p> <strong>yml支持多文档块模式</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><p><strong>激活指定profile</strong></p><ul><li>在配置文件中指定 spring.profiles.active=dev</li><li>命令行：<ul><li>–spring.profiles.active=dev</li><li>可以直接在测试的时候，配置传入命令行参数</li></ul></li><li>虚拟机参数： -Dspring.profiles.active=dev</li></ul><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p>spring boot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring Boot的默认配置文件</p><ul><li>file:./config/</li><li>file:./</li><li>classpath:/config/</li><li>classpath:/</li><li>以上是按照优先级从高到底的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容</li><li>我们也可以通过配置spring.config.location来改变默认配置</li><li>Spring Boot会从这四个位置全部加载主配置文件：<strong>互补配置</strong>；</li></ul><h2 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h2><p>Spring Boot支持多种外部配置方式</p><p>这些方式的优先级如下：</p><ul><li><strong>命令行参数</strong></li></ul><p>java -jar spring-boot-01-config-0.0.1-SNAPSHOT.jar –server.port=8087 –server.context.path=/abc</p><p>多个配置用空格分开；–配置项=值</p><ul><li>来自java:comp/env的JNDI属性</li><li>java系统属性（System.getProperties()）</li><li>操作系统环境变量</li><li>RandomValuePropertySource配置的random.*属性值</li></ul><p><strong>由jar包外向jar包内进行寻找</strong></p><p><strong>优先加载带profile</strong></p><ul><li><strong>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></li><li><strong>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></li></ul><p><strong>再来加载不带profile</strong></p><ul><li><strong>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></li><li><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></li><li>@Configuration注解类上的@PropertySource</li><li>通过SpringApplication.setDefaultProperties指定的默认属性</li></ul><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/appendix-application-properties.html#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><p><strong>自动配置原理</strong>：</p><ul><li><p>SpringBoot启动的时候加载朱配置类，开启了自动配置功能<strong>@EnableAutoConfiguration</strong></p></li><li><p>@EnableAutoConfiguration作用：</p><ul><li><p>利用AutoConfigurationImportSelector给容器中导入了一些组件</p></li><li><p>可以查看selectImports()方法的内容；</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">springFactoriesLoader.loadFactoryName()</span><br><span class="line">扫描所有jar包类路径下 META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br><span class="line">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把它们添加在容器中</span><br></pre></td></tr></table></figure><p><strong>将类路径下的 META-INF/spring.factories里面配置的所有EnableAutoConfiguration的值加入到了容器中；</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></table></figure><p>每一个这样的 xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p></li></ul></li><li><p>每一个自动配置类进行自动配置功能；</p></li><li><p>以<strong>HttpEncodingAutoConfiguration</strong>来为例解释自动配置原理；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(  <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器添加组件</span></span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpProperties.class&#125;)<span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到IOC容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>( <span class="comment">//Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter.class&#125;)<span class="comment">//判断当前项目有没有这个类，CharacterEncodingFilter；Spring MVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>( <span class="comment">//判断配置文件是否存在某个配置spring.http.encoding.enabled;如果不存在，判断也是成立的</span></span><br><span class="line">    <span class="comment">//即使我们配置文件中不配置spring.http.encoding.enabled=true,也是默认生效的；</span></span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只有一个有参的构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><ul><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span> ( <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line">    prefix = <span class="string">"spring.http"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> logRequestDetails;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding encoding = <span class="keyword">new</span> HttpProperties.Encoding();</span><br></pre></td></tr></table></figure><h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h2><ul><li><strong>SpringBoot启动会加载大量的自动配置类</strong></li><li><strong>我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></li><li><strong>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></li><li><strong>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></li></ul><p>xxxxAutoConfiguration：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties：封装配置文件中相关属性；</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="Conditional"></a>Conditional</h3><p><strong>@Conditional派生注解</strong>（可以自己去了解一下原生的作用）</p><p><strong>作用</strong>：必须是@Conditional指定的条件成立，才给容器添加组件，配置里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符号要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定的Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定的Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean,或者这个Bean是首先Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在制定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定条件下才能生效</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p>我们可以通过启用 debug=true属性；来让控制台自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</p><p><code>Positive matches:（自动配置类启用的）</code></p><p><code>Negative matches：（没有启用，没有匹配成功的自动配置类）</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Spring Boot学习笔记" scheme="http://wysblogs.top/categories/Spring-Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring Boot" scheme="http://wysblogs.top/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（一）入门</title>
    <link href="http://wysblogs.top/2019/10/19/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8/"/>
    <id>http://wysblogs.top/2019/10/19/SpringBoot（一）入门/</id>
    <published>2019-10-19T13:09:06.000Z</published>
    <updated>2019-10-20T13:08:31.346Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h1><h2 id="SpringBoot-简介"><a href="#SpringBoot-简介" class="headerlink" title="SpringBoot 简介"></a>SpringBoot 简介</h2><blockquote><p>简化Spring应用开发的框架；</p><p>整个Spring技术栈的大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>2014年martin fowler提出的微服务；</p><p>微服务是一种架构风格；</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式互通；</p><p>单体应用：ALL IN ONE；</p><p>把整个应用打成war包就可以部署到服务器上；</p><p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元</p><p><a href="https://martinfowler.com/" target="_blank" rel="noopener">详细参照微服务文档</a></p><h2 id="Spring-Boot优缺点"><a href="#Spring-Boot优缺点" class="headerlink" title="Spring Boot优缺点"></a>Spring Boot优缺点</h2><p><a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener">Spring Boot 官网</a></p><p>Spring Boot 来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用。</p><p>底层就是Spring技术栈</p><p><strong>SpringBoot优点</strong></p><ul><li>快速创建独立运行的Spring项目以及主流框架集成</li><li>快速嵌入式的Servlet容器，应用无需打成war包</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成</li></ul><p><strong>SpringBoot缺点</strong></p><ul><li>入门容易，精通难</li><li>SpringBoot封装机制不好懂</li><li>对底层api必须特别了解</li></ul><h2 id="Spring-Boot-例子"><a href="#Spring-Boot-例子" class="headerlink" title="Spring Boot 例子"></a>Spring Boot 例子</h2><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>一个功能</p><p>浏览器发送hello请求，服务器接受请求并处理，响应hello world字符串。</p><p><strong>1. 创建maven工程</strong></p><p>jar包</p><p><strong>2. 导入SpringBoot需要的依赖</strong></p><p>官网中可以查找到依赖</p><p><a href="https://start.spring.io/" target="_blank" rel="noopener">Maven依赖</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 编写一个主程序，启动Spring Boot应用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring应用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类,说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 编写相关的Controller、Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wys.HelloController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 运行主程序测试</strong></p><p><strong>6. 简化部署</strong></p><p>可执行jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入这个maven插件就行，就可以将这个应用打成jar包，直接使用java -jar的命令进行执行</p><h3 id="HelloWorld探究"><a href="#HelloWorld探究" class="headerlink" title="HelloWorld探究"></a>HelloWorld探究</h3><h4 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h4><p><strong>父项目</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；</p><p><strong>启动器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-web;</p><p>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成了一个个的starters（<strong>启动器</strong>），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器。</p><h4 id="主程序类，主入口类"><a href="#主程序类，主入口类" class="headerlink" title="主程序类，主入口类"></a>主程序类，主入口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring应用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类,说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> * 主程序要放在包的位置，不然找不到页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication： Spring Boot应用标注在某个类上，说明这个类是SpringBoot的主配置类，说明Spring Boot 就应该运行这个累的main方法，来启动SpringBoot应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConfigurationPropertiesScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@SpringBootConfiguration： Spring Boot的配置类；</p><ul><li>标注在某个类上，表示这是一个Spring Boot的配置类；</li><li><strong>@Configuration</strong>：配置类上来标注这个注解；<ul><li>配置类 —— 配置文件；配置类也是容器中的一个组件；@Component</li></ul></li><li><strong>@EnableAutoConfiguration</strong>：开启自动配置功能；<ul><li>以前我们需要配置的东西，Spring Boot帮我们自动配置；</li><li>这个注解告诉SpringBoot开启自动配置功能；这样自动配置才能生效</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p><strong>@AutoConfigurationPackage</strong>：自动配置包</p><ul><li><strong>@Import({Registrar.class})</strong>；</li><li>Spring的底层注解@Import，给容器导入一个组件；导入的组件Registrar.class</li></ul><p><code>将主配置类（@SpringBootApplication标注的类）所在的包及所有子包里面的所有组件扫描到Spring容器中。</code></p><p><strong>@Import({AutoConfigurationImportSelector.class})</strong>：</p><ul><li>给容器中导入组件</li><li>AutoConfigurationImportSelector：导入哪些组件的选择器</li><li>将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</li><li>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器导入所有组件，并配置好这些组件；</li><li>有了自动配置类，就免去了我们手动编写配置注入功能组件的工作；</li><li>以前我们需要自己配置的东西，自动配置类都帮我们配置了；</li><li>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-2.2.0.RELEASE.jar这个包中</li></ul><h2 id="使用Spring-Initializer快速创建Spring-Boot项目"><a href="#使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="使用Spring Initializer快速创建Spring Boot项目"></a>使用Spring Initializer快速创建Spring Boot项目</h2><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目</p><p><strong>默认生成的Spring Boot项目</strong>：</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中的目录结构<ul><li>static文件夹：保存所有的静态资源；js文件，css文件，图片文件等；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker，thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Spring Boot学习笔记" scheme="http://wysblogs.top/categories/Spring-Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring Boot" scheme="http://wysblogs.top/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
